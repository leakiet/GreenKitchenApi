package com.greenkitchen.portal.services.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.greenkitchen.portal.dtos.AIContentRequest;
import com.greenkitchen.portal.dtos.AIContentResponse;
import com.greenkitchen.portal.services.AIContentService;

@Service
public class AIContentServiceImpl implements AIContentService {

    private static final Logger log = LoggerFactory.getLogger(AIContentServiceImpl.class);

    @Autowired
    private ChatClient chatClient;

    @Override
    public AIContentResponse generatePostContent(AIContentRequest request) {
        try {
            log.info("ü§ñ Generating complete post content for topic: {}", request.getTopic());
            
            // Build prompt manually to avoid template parsing issues
            String prompt = buildPromptForCompleteContent(request);
            
            ChatResponse response = chatClient.prompt(prompt).call().chatResponse();
            
            String content = response.getResult().getOutput().getText();
            log.info("‚úÖ AI generated content successfully, length: {} characters", content.length());
            
            return parseAIResponse(content);
            
        } catch (Exception e) {
            log.error("‚ùå Error generating post content: {}", e.getMessage(), e);
            return createErrorResponse("L·ªói khi t·∫°o n·ªôi dung: " + e.getMessage());
        }
    }

    @Override
    public AIContentResponse generateTitleOnly(AIContentRequest request) {
        try {
            log.info("ü§ñ Generating title only for topic: {}", request.getTopic());
            
            String prompt = String.format(
                "H√£y t·∫°o m·ªôt ti√™u ƒë·ªÅ h·∫•p d·∫´n v√† SEO-friendly cho b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ '%s' " +
                "trong danh m·ª•c '%s' v·ªõi phong c√°ch '%s' cho ƒë·ªëi t∆∞·ª£ng '%s'. " +
                "Ti√™u ƒë·ªÅ ph·∫£i thu h√∫t s·ª± ch√∫ √Ω v√† ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu Green Kitchen - nh√† h√†ng chuy√™n v·ªÅ th·ª±c ph·∫©m s·∫°ch, an to√†n v√† gi√†u dinh d∆∞·ª°ng. " +
                "Ch·ªâ tr·∫£ v·ªÅ ti√™u ƒë·ªÅ, kh√¥ng c√≥ g√¨ kh√°c.",
                request.getTopic() != null ? request.getTopic() : "",
                request.getCategory() != null ? request.getCategory() : "",
                request.getStyle() != null ? request.getStyle() : "friendly",
                request.getTargetAudience() != null ? request.getTargetAudience() : "customers"
            );
            
            ChatResponse response = chatClient.prompt(prompt).call().chatResponse();
            String title = response.getResult().getOutput().getText().trim();
            
            AIContentResponse result = new AIContentResponse();
            result.setTitle(title);
            result.setSlug(generateSlug(title));
            result.setStatus("success");
            
            log.info("‚úÖ AI generated title successfully: {}", title);
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå Error generating title: {}", e.getMessage(), e);
            return createErrorResponse("L·ªói khi t·∫°o ti√™u ƒë·ªÅ: " + e.getMessage());
        }
    }

    @Override
    public AIContentResponse generateContentOnly(AIContentRequest request) {
        try {
            log.info("ü§ñ Generating content only for topic: {}", request.getTopic());
            
            String prompt = String.format(
                "H√£y vi·∫øt n·ªôi dung b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ '%s' trong danh m·ª•c '%s' " +
                "v·ªõi phong c√°ch '%s' cho ƒë·ªëi t∆∞·ª£ng '%s'. " +
                "B√†i vi·∫øt kho·∫£ng %d t·ª´ v√† vi·∫øt b·∫±ng ti·∫øng %s. " +
                "N·ªôi dung ph·∫£i ch·∫•t l∆∞·ª£ng cao, h·ªØu √≠ch v√† ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu Green Kitchen. " +
                "%s " +
                "H√£y tr·∫£ v·ªÅ n·ªôi dung ƒë∆∞·ª£c c·∫•u tr√∫c r√µ r√†ng v·ªõi c√°c ƒëo·∫°n vƒÉn.",
                request.getTopic() != null ? request.getTopic() : "",
                request.getCategory() != null ? request.getCategory() : "",
                request.getStyle() != null ? request.getStyle() : "friendly",
                request.getTargetAudience() != null ? request.getTargetAudience() : "customers",
                request.getWordCount() != null ? request.getWordCount() : 500,
                "vi".equals(request.getLanguage()) ? "Vi·ªát" : "Anh",
                request.getAdditionalInstructions() != null ? request.getAdditionalInstructions() : ""
            );
            
            ChatResponse response = chatClient.prompt(prompt).call().chatResponse();
            String content = response.getResult().getOutput().getText().trim();
            
            AIContentResponse result = new AIContentResponse();
            result.setContent(content);
            result.setExcerpt(generateExcerpt(content));
            result.setStatus("success");
            
            log.info("‚úÖ AI generated content successfully, length: {} characters", content.length());
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå Error generating content: {}", e.getMessage(), e);
            return createErrorResponse("L·ªói khi t·∫°o n·ªôi dung: " + e.getMessage());
        }
    }


    private String buildPromptForCompleteContent(AIContentRequest request) {
        return String.format(
            "B·∫°n l√† chuy√™n gia vi·∫øt n·ªôi dung cho Green Kitchen - m·ªôt nh√† h√†ng chuy√™n v·ªÅ th·ª±c ph·∫©m s·∫°ch, an to√†n v√† gi√†u dinh d∆∞·ª°ng.\n\n" +
            "## Th√¥ng tin v·ªÅ Green Kitchen\n" +
            "- **ƒê·ªãa ch·ªâ**: 123 Nguy·ªÖn VƒÉn C·ª´, Q5, TP.HCM | ƒêi·ªán tho·∫°i: 0908 123 456\n" +
            "- **Th√†nh l·∫≠p**: T·ª´ 2018\n" +
            "- **B·∫øp tr∆∞·ªüng**: Nguy·ªÖn Th·ªã H·∫°nh (tr√™n 20 nƒÉm kinh nghi·ªám)\n" +
            "- **Th√†nh t√≠ch**: Top 3 TP.HCM 2023, ch·ª©ng nh·∫≠n HACCP t·ª´ 2019, gi·∫£i V√†ng 2022, Doanh nghi·ªáp v√¨ c·ªông ƒë·ªìng 2021\n" +
            "- **S·ª© m·ªánh**: Cung c·∫•p th·ª±c ph·∫©m s·∫°ch, an to√†n, gi√†u dinh d∆∞·ª°ng cho c·ªông ƒë·ªìng\n" +
            "- **Gi·ªù m·ªü c·ª≠a**: 6:00 s√°ng ƒë·∫øn 22:00 t·ªëi t·∫•t c·∫£ c√°c ng√†y trong tu·∫ßn\n\n" +
            "## Y√™u c·∫ßu t·∫°o n·ªôi dung\n" +
            "H√£y t·∫°o n·ªôi dung b√†i vi·∫øt v·ªõi th√¥ng tin sau:\n\n" +
            "**Ch·ªß ƒë·ªÅ**: %s\n" +
            "**Danh m·ª•c**: %s\n" +
            "**Phong c√°ch vi·∫øt**: %s\n" +
            "**ƒê·ªëi t∆∞·ª£ng ƒë·ªôc gi·∫£**: %s\n" +
            "**S·ªë t·ª´ mong mu·ªën**: %d\n" +
            "**Ng√¥n ng·ªØ**: %s\n" +
            "**H∆∞·ªõng d·∫´n b·ªï sung**: %s\n\n" +
            "## Y√™u c·∫ßu tr·∫£ v·ªÅ\n" +
            "H√£y t·∫°o n·ªôi dung b√†i vi·∫øt ho√†n ch·ªânh v√† tr·∫£ v·ªÅ theo format JSON ch√≠nh x√°c nh∆∞ sau:\n\n" +
            "```json\n" +
            "{\n" +
            "  \"title\": \"Ti√™u ƒë·ªÅ h·∫•p d·∫´n v√† SEO-friendly ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ\",\n" +
            "  \"content\": \"N·ªôi dung b√†i vi·∫øt ƒë·∫ßy ƒë·ªß v·ªõi c√°c ƒëo·∫°n vƒÉn ƒë∆∞·ª£c c·∫•u tr√∫c r√µ r√†ng, ph√π h·ª£p v·ªõi phong c√°ch %s cho ƒë·ªëi t∆∞·ª£ng %s. B√†i vi·∫øt kho·∫£ng %d t·ª´ v√† vi·∫øt b·∫±ng %s.\",\n" +
            "  \"slug\": \"tieu-de-hap-dan-va-seo-friendly\",\n" +
            "  \"excerpt\": \"T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ n·ªôi dung b√†i vi·∫øt trong 100-150 t·ª´\",\n" +
            "  \"status\": \"success\"\n" +
            "}\n" +
            "```\n\n" +
            "**L∆∞u √Ω quan tr·ªçng:**\n" +
            "- Tr·∫£ v·ªÅ CH√çNH X√ÅC format JSON nh∆∞ tr√™n\n" +
            "- Kh√¥ng th√™m text ho·∫∑c markdown kh√°c\n" +
            "- ƒê·∫£m b·∫£o JSON h·ª£p l·ªá\n" +
            "- Ti√™u ƒë·ªÅ ph·∫£i h·∫•p d·∫´n v√† SEO-friendly\n" +
            "- N·ªôi dung ph·∫£i ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu Green Kitchen\n" +
            "- Slug ƒë∆∞·ª£c t·∫°o t·ª´ ti√™u ƒë·ªÅ (lowercase, kh√¥ng d·∫•u, d√πng d·∫•u g·∫°ch ngang)\n" +
            "- Excerpt l√† t√≥m t·∫Øt ng·∫Øn g·ªçn trong 100-150 t·ª´",
            request.getTopic() != null ? request.getTopic() : "",
            request.getCategory() != null ? request.getCategory() : "",
            request.getStyle() != null ? request.getStyle() : "friendly",
            request.getTargetAudience() != null ? request.getTargetAudience() : "customers",
            request.getWordCount() != null ? request.getWordCount() : 500,
            request.getLanguage() != null ? request.getLanguage() : "vi",
            request.getAdditionalInstructions() != null ? request.getAdditionalInstructions() : "",
            request.getStyle() != null ? request.getStyle() : "friendly",
            request.getTargetAudience() != null ? request.getTargetAudience() : "customers",
            request.getWordCount() != null ? request.getWordCount() : 500,
            request.getLanguage() != null ? request.getLanguage() : "vi"
        );
    }

    private AIContentResponse parseAIResponse(String content) {
        try {
            log.info("Parsing AI response: {}", content.substring(0, Math.min(200, content.length())));
            
            // Clean up the response - remove markdown code blocks if present
            String cleanContent = content.trim();
            if (cleanContent.startsWith("```json")) {
                cleanContent = cleanContent.substring(7);
            }
            if (cleanContent.endsWith("```")) {
                cleanContent = cleanContent.substring(0, cleanContent.length() - 3);
            }
            cleanContent = cleanContent.trim();
            
            // Try to parse as JSON first
            if (cleanContent.startsWith("{")) {
                AIContentResponse response = new AIContentResponse();
                
                // Extract title
                String title = extractJsonValue(cleanContent, "title");
                if (title != null && !title.trim().isEmpty()) {
                    response.setTitle(title.trim());
                    response.setSlug(generateSlug(title));
                }
                
                // Extract content
                String contentValue = extractJsonValue(cleanContent, "content");
                if (contentValue != null && !contentValue.trim().isEmpty()) {
                    response.setContent(contentValue.trim());
                    response.setExcerpt(generateExcerpt(contentValue));
                }
                
                // Extract slug if provided
                String slug = extractJsonValue(cleanContent, "slug");
                if (slug != null && !slug.trim().isEmpty()) {
                    response.setSlug(slug.trim());
                }
                
                // Extract excerpt if provided
                String excerpt = extractJsonValue(cleanContent, "excerpt");
                if (excerpt != null && !excerpt.trim().isEmpty()) {
                    response.setExcerpt(excerpt.trim());
                }
                
                // Extract status
                String status = extractJsonValue(cleanContent, "status");
                response.setStatus(status != null ? status : "success");
                
                // If we got both title and content, return success
                if (response.getTitle() != null && response.getContent() != null) {
                    return response;
                }
            }
            
            // If JSON parsing failed or incomplete, treat as plain content
            log.warn("JSON parsing failed or incomplete, treating as plain content");
            AIContentResponse response = new AIContentResponse();
            response.setContent(content);
            response.setExcerpt(generateExcerpt(content));
            response.setStatus("success");
            return response;
            
        } catch (Exception e) {
            log.warn("Failed to parse AI response as JSON, treating as plain content: {}", e.getMessage());
            AIContentResponse response = new AIContentResponse();
            response.setContent(content);
            response.setExcerpt(generateExcerpt(content));
            response.setStatus("success");
            return response;
        }
    }

    private String extractJsonValue(String json, String key) {
        try {
            // Handle both quoted and unquoted values, and multiline strings
            String pattern = "\"" + key + "\"\\s*:\\s*\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"";
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL);
            java.util.regex.Matcher m = p.matcher(json);
            if (m.find()) {
                String value = m.group(1);
                // Unescape common JSON escape sequences
                value = value.replace("\\n", "\n")
                           .replace("\\r", "\r")
                           .replace("\\t", "\t")
                           .replace("\\\"", "\"")
                           .replace("\\\\", "\\");
                return value;
            }
            
            // Try without quotes for simple values
            pattern = "\"" + key + "\"\\s*:\\s*([^,\\n\\r}]+)";
            p = java.util.regex.Pattern.compile(pattern);
            m = p.matcher(json);
            if (m.find()) {
                return m.group(1).trim().replaceAll("^\"|\"$", "");
            }
        } catch (Exception e) {
            log.warn("Failed to extract JSON value for key {}: {}", key, e.getMessage());
        }
        return null;
    }

    private String generateSlug(String title) {
        if (title == null || title.trim().isEmpty()) {
            return "";
        }
        
        return title.toLowerCase()
                .replaceAll("[^a-z0-9\\s-]", "")
                .replaceAll("\\s+", "-")
                .replaceAll("-+", "-")
                .trim()
                .replaceAll("^-|-$", "");
    }

    private String generateExcerpt(String content) {
        if (content == null || content.trim().isEmpty()) {
            return "";
        }
        
        // Remove markdown formatting and HTML tags
        String cleanContent = content.replaceAll("\\*\\*([^*]+)\\*\\*", "$1")
                .replaceAll("\\*([^*]+)\\*", "$1")
                .replaceAll("#+\\s*", "")
                .replaceAll("<[^>]+>", "")
                .replaceAll("\\n+", " ")
                .trim();
        
        // Take first 150 characters
        if (cleanContent.length() <= 150) {
            return cleanContent;
        }
        
        // Find last complete word within 150 characters
        String excerpt = cleanContent.substring(0, 150);
        int lastSpace = excerpt.lastIndexOf(' ');
        if (lastSpace > 100) { // Only if we have enough content
            excerpt = excerpt.substring(0, lastSpace);
        }
        
        return excerpt + "...";
    }

    private AIContentResponse createErrorResponse(String message) {
        AIContentResponse response = new AIContentResponse();
        response.setStatus("error");
        response.setMessage(message);
        return response;
    }
}
