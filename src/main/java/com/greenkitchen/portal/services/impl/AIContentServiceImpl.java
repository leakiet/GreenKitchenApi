package com.greenkitchen.portal.services.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.core.io.ClassPathResource;
import java.nio.charset.StandardCharsets;
import java.io.InputStream;
import java.util.Scanner;

import com.greenkitchen.portal.dtos.AIContentRequest;
import com.greenkitchen.portal.dtos.AIContentResponse;
import com.greenkitchen.portal.dtos.AITopicsResponse;
import com.greenkitchen.portal.services.AIContentService;

@Service
public class AIContentServiceImpl implements AIContentService {

    private static final Logger log = LoggerFactory.getLogger(AIContentServiceImpl.class);

    @Autowired
    private ChatClient chatClient;

    @Override
    public AIContentResponse generatePostContent(AIContentRequest request) {
        try {
            log.info("ü§ñ Generating complete post content for topic: {}", request.getTopic());
            
            // ∆Øu ti√™n d√πng template .md trong resources n·∫øu c√≥
            String prompt;
            boolean usedMarkdownTemplate = false;
            try {
                prompt = buildPromptFromMarkdownTemplate(request);
                usedMarkdownTemplate = true;
            } catch (Exception ex) {
                log.warn("Markdown prompt template not found or invalid, fallback to manual prompt: {}", ex.getMessage());
                prompt = buildPromptForCompleteContent(request);
            }
            
            ChatResponse response = chatClient.prompt(prompt).call().chatResponse();
            
            String content = response.getResult().getOutput().getText();
            log.info("‚úÖ AI generated content successfully, length: {} characters", content.length());
            
            AIContentResponse aiResp = parseAIResponse(content);
            aiResp.setPromptSource(usedMarkdownTemplate ? "markdown" : "manual");
            return aiResp;
            
        } catch (Exception e) {
            log.error("‚ùå Error generating post content: {}", e.getMessage(), e);
            return createErrorResponse("L·ªói khi t·∫°o n·ªôi dung: " + e.getMessage());
        }
    }

    @Override
    public AITopicsResponse suggestTopics(String category, String style, String audience, int count, String language) {
        try {
            String prompt = String.format(
                "H√£y ƒë·ªÅ xu·∫•t %d ch·ªß ƒë·ªÅ b√†i vi·∫øt ph√π h·ª£p cho nh√† h√†ng Green Kitchen v·ªÅ danh m·ª•c '%s', phong c√°ch '%s', ƒë·ªëi t∆∞·ª£ng '%s', ng√¥n ng·ªØ '%s'. " +
                "Ch·ªâ tr·∫£ v·ªÅ danh s√°ch ch·ªß ƒë·ªÅ, m·ªói d√≤ng m·ªôt ch·ªß ƒë·ªÅ, kh√¥ng th√™m ch√∫ th√≠ch.",
                Math.max(3, Math.min(count, 15)),
                category != null ? category : "",
                style != null ? style : "friendly",
                audience != null ? audience : "customers",
                language != null ? language : "vi"
            );

            ChatResponse response = chatClient.prompt(prompt).call().chatResponse();
            String text = response.getResult().getOutput().getText();
            java.util.List<String> topics = new java.util.ArrayList<>();
            for (String line : text.split("\n")) {
                String t = line.replaceAll("^[-*#0-9.\\s]+", "").trim();
                if (!t.isBlank()) topics.add(t);
            }
            AITopicsResponse resp = new AITopicsResponse();
            resp.setTopics(topics);
            resp.setStatus("success");
            return resp;
        } catch (Exception e) {
            AITopicsResponse resp = new AITopicsResponse();
            resp.setStatus("error");
            resp.setMessage(e.getMessage());
            resp.setTopics(java.util.List.of());
            return resp;
        }
    }

    @Override
    public AIContentResponse generateTitleOnly(AIContentRequest request) {
        try {
            log.info("ü§ñ Generating title only for topic: {}", request.getTopic());
            
            String prompt = String.format(
                "H√£y t·∫°o m·ªôt ti√™u ƒë·ªÅ h·∫•p d·∫´n v√† SEO-friendly cho b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ '%s' " +
                "trong danh m·ª•c '%s' v·ªõi phong c√°ch '%s' cho ƒë·ªëi t∆∞·ª£ng '%s'. " +
                "Ti√™u ƒë·ªÅ ph·∫£i thu h√∫t s·ª± ch√∫ √Ω v√† ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu Green Kitchen - nh√† h√†ng chuy√™n v·ªÅ th·ª±c ph·∫©m s·∫°ch, an to√†n v√† gi√†u dinh d∆∞·ª°ng. " +
                "Ch·ªâ tr·∫£ v·ªÅ ti√™u ƒë·ªÅ, kh√¥ng c√≥ g√¨ kh√°c.",
                request.getTopic() != null ? request.getTopic() : "",
                request.getCategory() != null ? request.getCategory() : "",
                request.getStyle() != null ? request.getStyle() : "friendly",
                request.getTargetAudience() != null ? request.getTargetAudience() : "customers"
            );
            
            ChatResponse response = chatClient.prompt(prompt).call().chatResponse();
            String title = response.getResult().getOutput().getText().trim();
            
            AIContentResponse result = new AIContentResponse();
            result.setTitle(title);
            result.setSlug(generateSlug(title));
            result.setStatus("success");
            
            log.info("‚úÖ AI generated title successfully: {}", title);
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå Error generating title: {}", e.getMessage(), e);
            return createErrorResponse("L·ªói khi t·∫°o ti√™u ƒë·ªÅ: " + e.getMessage());
        }
    }

    @Override
    public AIContentResponse generateContentOnly(AIContentRequest request) {
        try {
            log.info("ü§ñ Generating content only for topic: {}", request.getTopic());
            
            String prompt = String.format(
                "H√£y vi·∫øt n·ªôi dung b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ '%s' trong danh m·ª•c '%s' " +
                "v·ªõi phong c√°ch '%s' cho ƒë·ªëi t∆∞·ª£ng '%s'. " +
                "B√†i vi·∫øt kho·∫£ng %d t·ª´ v√† vi·∫øt b·∫±ng ti·∫øng %s. " +
                "N·ªôi dung ph·∫£i ch·∫•t l∆∞·ª£ng cao, h·ªØu √≠ch v√† ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu Green Kitchen. " +
                "%s " +
                "QUAN TR·ªåNG: Ch√®n 1-3 h√¨nh ·∫£nh ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ b·∫±ng c√∫ ph√°p markdown d·∫°ng: ![M√¥ t·∫£ ·∫£nh](URL_·∫£nh). " +
                "∆Øu ti√™n ·∫£nh ch·∫•t l∆∞·ª£ng cao t·ª´ Unsplash/Pexels (v√≠ d·ª•: https://images.unsplash.com/photo-1512621776951-a57141f2eefd, https://images.unsplash.com/photo-1546554137-f86b9593a222). " +
                "H√£y tr·∫£ v·ªÅ n·ªôi dung ƒë∆∞·ª£c c·∫•u tr√∫c r√µ r√†ng v·ªõi c√°c ƒëo·∫°n vƒÉn.",
                request.getTopic() != null ? request.getTopic() : "",
                request.getCategory() != null ? request.getCategory() : "",
                request.getStyle() != null ? request.getStyle() : "friendly",
                request.getTargetAudience() != null ? request.getTargetAudience() : "customers",
                request.getWordCount() != null ? request.getWordCount() : 500,
                "vi".equals(request.getLanguage()) ? "Vi·ªát" : "Anh",
                request.getAdditionalInstructions() != null ? request.getAdditionalInstructions() : ""
            );
            
            ChatResponse response = chatClient.prompt(prompt).call().chatResponse();
            String content = response.getResult().getOutput().getText().trim();
            String before = content;
            content = ensureImagesInContent(request.getTopic(), request.getCategory(), content);
            
            AIContentResponse result = new AIContentResponse();
            result.setContent(content);
            result.setExcerpt(generateExcerpt(content));
            result.setStatus("success");
            result.setPromptSource("manual");
            if (before.equals(content)) {
                result.setImageInjection("ai");
            } else {
                result.setImageInjection("fallback");
            }
            
            log.info("‚úÖ AI generated content successfully, length: {} characters", content.length());
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå Error generating content: {}", e.getMessage(), e);
            return createErrorResponse("L·ªói khi t·∫°o n·ªôi dung: " + e.getMessage());
        }
    }


    private String buildPromptForCompleteContent(AIContentRequest request) {
        return String.format(
            "B·∫°n l√† chuy√™n gia vi·∫øt n·ªôi dung cho Green Kitchen - m·ªôt nh√† h√†ng chuy√™n v·ªÅ th·ª±c ph·∫©m s·∫°ch, an to√†n v√† gi√†u dinh d∆∞·ª°ng.\n\n" +
            "## Th√¥ng tin v·ªÅ Green Kitchen\n" +
            "- **ƒê·ªãa ch·ªâ**: 123 Nguy·ªÖn VƒÉn C·ª´, Q5, TP.HCM | ƒêi·ªán tho·∫°i: 0908 123 456\n" +
            "- **Th√†nh l·∫≠p**: T·ª´ 2018\n" +
            "- **B·∫øp tr∆∞·ªüng**: Nguy·ªÖn Th·ªã H·∫°nh (tr√™n 20 nƒÉm kinh nghi·ªám)\n" +
            "- **Th√†nh t√≠ch**: Top 3 TP.HCM 2023, ch·ª©ng nh·∫≠n HACCP t·ª´ 2019, gi·∫£i V√†ng 2022, Doanh nghi·ªáp v√¨ c·ªông ƒë·ªìng 2021\n" +
            "- **S·ª© m·ªánh**: Cung c·∫•p th·ª±c ph·∫©m s·∫°ch, an to√†n, gi√†u dinh d∆∞·ª°ng cho c·ªông ƒë·ªìng\n" +
            "- **Gi·ªù m·ªü c·ª≠a**: 6:00 s√°ng ƒë·∫øn 22:00 t·ªëi t·∫•t c·∫£ c√°c ng√†y trong tu·∫ßn\n\n" +
            "## Y√™u c·∫ßu t·∫°o n·ªôi dung\n" +
            "H√£y t·∫°o n·ªôi dung b√†i vi·∫øt v·ªõi th√¥ng tin sau:\n\n" +
            "**Ch·ªß ƒë·ªÅ**: %s\n" +
            "**Danh m·ª•c**: %s\n" +
            "**Phong c√°ch vi·∫øt**: %s\n" +
            "**ƒê·ªëi t∆∞·ª£ng ƒë·ªôc gi·∫£**: %s\n" +
            "**S·ªë t·ª´ mong mu·ªën**: %d\n" +
            "**Ng√¥n ng·ªØ**: %s\n" +
            "**H∆∞·ªõng d·∫´n b·ªï sung**: %s\n\n" +
            "## Y√™u c·∫ßu tr·∫£ v·ªÅ\n" +
            "H√£y t·∫°o n·ªôi dung b√†i vi·∫øt ho√†n ch·ªânh v√† tr·∫£ v·ªÅ theo format JSON ch√≠nh x√°c nh∆∞ sau:\n\n" +
            "```json\n" +
            "{\n" +
            "  \"title\": \"Ti√™u ƒë·ªÅ h·∫•p d·∫´n v√† SEO-friendly ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ\",\n" +
            "  \"content\": \"N·ªôi dung b√†i vi·∫øt ƒë·∫ßy ƒë·ªß v·ªõi c√°c ƒëo·∫°n vƒÉn ƒë∆∞·ª£c c·∫•u tr√∫c r√µ r√†ng, ph√π h·ª£p v·ªõi phong c√°ch %s cho ƒë·ªëi t∆∞·ª£ng %s. B√†i vi·∫øt kho·∫£ng %d t·ª´ v√† vi·∫øt b·∫±ng %s. QUAN TR·ªåNG: Bao g·ªìm 1-3 h√¨nh ·∫£nh ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ s·ª≠ d·ª•ng markdown format: ![M√¥ t·∫£ ·∫£nh](URL_·∫£nh). Ch·ªçn ·∫£nh t·ª´ danh s√°ch ƒë∆∞·ª£c cung c·∫•p ho·∫∑c ·∫£nh t∆∞∆°ng t·ª± t·ª´ Unsplash.\",\n" +
            "  \"slug\": \"tieu-de-hap-dan-va-seo-friendly\",\n" +
            "  \"excerpt\": \"T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ n·ªôi dung b√†i vi·∫øt trong 100-150 t·ª´\",\n" +
            "  \"status\": \"success\"\n" +
            "}\n" +
            "```\n\n" +
            "**L∆∞u √Ω quan tr·ªçng:**\n" +
            "- Tr·∫£ v·ªÅ CH√çNH X√ÅC format JSON nh∆∞ tr√™n\n" +
            "- Kh√¥ng th√™m text ho·∫∑c markdown kh√°c\n" +
            "- ƒê·∫£m b·∫£o JSON h·ª£p l·ªá\n" +
            "- Ti√™u ƒë·ªÅ ph·∫£i h·∫•p d·∫´n v√† SEO-friendly\n" +
            "- N·ªôi dung ph·∫£i ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu Green Kitchen\n" +
            "- Slug ƒë∆∞·ª£c t·∫°o t·ª´ ti√™u ƒë·ªÅ (lowercase, kh√¥ng d·∫•u, d√πng d·∫•u g·∫°ch ngang)\n" +
            "- Excerpt l√† t√≥m t·∫Øt ng·∫Øn g·ªçn trong 100-150 t·ª´\n" +
            "- H√¨nh ·∫£nh ph·∫£i s·ª≠ d·ª•ng markdown format: ![M√¥ t·∫£](URL_·∫£nh) v√† ch·ªçn ·∫£nh ph√π h·ª£p ch·ªß ƒë·ªÅ (v√≠ d·ª• t·ª´ Unsplash: https://images.unsplash.com/photo-1512621776951-a57141f2eefd, https://images.unsplash.com/photo-1546554137-f86b9593a222)",
            request.getTopic() != null ? request.getTopic() : "",
            request.getCategory() != null ? request.getCategory() : "",
            request.getStyle() != null ? request.getStyle() : "friendly",
            request.getTargetAudience() != null ? request.getTargetAudience() : "customers",
            request.getWordCount() != null ? request.getWordCount() : 500,
            request.getLanguage() != null ? request.getLanguage() : "vi",
            request.getAdditionalInstructions() != null ? request.getAdditionalInstructions() : "",
            request.getStyle() != null ? request.getStyle() : "friendly",
            request.getTargetAudience() != null ? request.getTargetAudience() : "customers",
            request.getWordCount() != null ? request.getWordCount() : 500,
            request.getLanguage() != null ? request.getLanguage() : "vi"
        );
    }

    private String buildPromptFromMarkdownTemplate(AIContentRequest request) throws Exception {
        ClassPathResource resource = new ClassPathResource("prompts/PostContentGeneration.md");
        if (!resource.exists()) throw new IllegalStateException("Template PostContentGeneration.md not found");
        try (InputStream is = resource.getInputStream(); Scanner s = new Scanner(is, StandardCharsets.UTF_8)) {
            s.useDelimiter("\\A");
            String tpl = s.hasNext() ? s.next() : "";
            if (tpl.isBlank()) throw new IllegalStateException("Template is empty");

            // Thay th·∫ø placeholder theo ƒë·ªãnh d·∫°ng trong file .md
            tpl = tpl.replace("{topic}", safe(request.getTopic()))
                     .replace("{category}", safe(request.getCategory()))
                     .replace("{style}", safeOrDefault(request.getStyle(), "friendly"))
                     .replace("{targetAudience}", safeOrDefault(request.getTargetAudience(), "customers"))
                     .replace("{wordCount}", String.valueOf(request.getWordCount() != null ? request.getWordCount() : 500))
                     .replace("{language}", safeOrDefault(request.getLanguage(), "vi"))
                     .replace("{additionalInstructions}", safeOrDefault(request.getAdditionalInstructions(), ""));
            return tpl;
        }
    }

    private String safe(String v) {
        return v == null ? "" : v;
    }

    private String safeOrDefault(String v, String def) {
        return (v == null || v.isBlank()) ? def : v;
    }

    private AIContentResponse parseAIResponse(String content) {
        try {
            log.info("Parsing AI response: {}", content.substring(0, Math.min(200, content.length())));
            
            // Clean up the response - remove markdown code blocks if present
            String cleanContent = content.trim();
            if (cleanContent.startsWith("```json")) {
                cleanContent = cleanContent.substring(7);
            }
            if (cleanContent.endsWith("```")) {
                cleanContent = cleanContent.substring(0, cleanContent.length() - 3);
            }
            cleanContent = cleanContent.trim();
            
            // Try to parse as JSON first
            if (cleanContent.startsWith("{")) {
                AIContentResponse response = new AIContentResponse();
                
                // Extract title
                String title = extractJsonValue(cleanContent, "title");
                if (title != null && !title.trim().isEmpty()) {
                    response.setTitle(title.trim());
                    response.setSlug(generateSlug(title));
                }
                
                // Extract content
                String contentValue = extractJsonValue(cleanContent, "content");
                if (contentValue != null && !contentValue.trim().isEmpty()) {
                    String original = contentValue.trim();
                    String finalized = ensureImagesInContent(null, null, original);
                    response.setContent(finalized);
                    response.setExcerpt(generateExcerpt(finalized));
                    response.setImageInjection(original.equals(finalized) ? "ai" : "fallback");
                }
                
                // Extract slug if provided
                String slug = extractJsonValue(cleanContent, "slug");
                if (slug != null && !slug.trim().isEmpty()) {
                    response.setSlug(slug.trim());
                }
                
                // Extract excerpt if provided
                String excerpt = extractJsonValue(cleanContent, "excerpt");
                if (excerpt != null && !excerpt.trim().isEmpty()) {
                    response.setExcerpt(excerpt.trim());
                }
                
                // Extract status
                String status = extractJsonValue(cleanContent, "status");
                response.setStatus(status != null ? status : "success");
                
                // If we got both title and content, return success
                if (response.getTitle() != null && response.getContent() != null) {
                    return response;
                }
            }
            
            // If JSON parsing failed or incomplete, treat as plain content
            log.warn("JSON parsing failed or incomplete, treating as plain content");
            AIContentResponse response = new AIContentResponse();
            String original = content;
            String finalized = ensureImagesInContent(null, null, original);
            response.setContent(finalized);
            response.setExcerpt(generateExcerpt(finalized));
            response.setStatus("success");
            response.setImageInjection(original.equals(finalized) ? "ai" : "fallback");
            return response;
            
        } catch (Exception e) {
            log.warn("Failed to parse AI response as JSON, treating as plain content: {}", e.getMessage());
            AIContentResponse response = new AIContentResponse();
            String original = content;
            String finalized = ensureImagesInContent(null, null, original);
            response.setContent(finalized);
            response.setExcerpt(generateExcerpt(finalized));
            response.setStatus("success");
            response.setImageInjection(original.equals(finalized) ? "ai" : "fallback");
            return response;
        }
    }

    private String extractJsonValue(String json, String key) {
        try {
            // Handle both quoted and unquoted values, and multiline strings
            String pattern = "\"" + key + "\"\\s*:\\s*\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"";
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL);
            java.util.regex.Matcher m = p.matcher(json);
            if (m.find()) {
                String value = m.group(1);
                // Unescape common JSON escape sequences
                value = value.replace("\\n", "\n")
                           .replace("\\r", "\r")
                           .replace("\\t", "\t")
                           .replace("\\\"", "\"")
                           .replace("\\\\", "\\");
                return value;
            }
            
            // Try without quotes for simple values
            pattern = "\"" + key + "\"\\s*:\\s*([^,\\n\\r}]+)";
            p = java.util.regex.Pattern.compile(pattern);
            m = p.matcher(json);
            if (m.find()) {
                return m.group(1).trim().replaceAll("^\"|\"$", "");
            }
        } catch (Exception e) {
            log.warn("Failed to extract JSON value for key {}: {}", key, e.getMessage());
        }
        return null;
    }

    private String generateSlug(String title) {
        if (title == null || title.trim().isEmpty()) {
            return "";
        }
        
        return title.toLowerCase()
                .replaceAll("[^a-z0-9\\s-]", "")
                .replaceAll("\\s+", "-")
                .replaceAll("-+", "-")
                .trim()
                .replaceAll("^-|-$", "");
    }

    private String generateExcerpt(String content) {
        if (content == null || content.trim().isEmpty()) {
            return "";
        }
        
        // Remove markdown formatting and HTML tags
        String cleanContent = content.replaceAll("\\*\\*([^*]+)\\*\\*", "$1")
                .replaceAll("\\*([^*]+)\\*", "$1")
                .replaceAll("#+\\s*", "")
                .replaceAll("<[^>]+>", "")
                .replaceAll("\\n+", " ")
                .trim();
        
        // Take first 150 characters
        if (cleanContent.length() <= 150) {
            return cleanContent;
        }
        
        // Find last complete word within 150 characters
        String excerpt = cleanContent.substring(0, 150);
        int lastSpace = excerpt.lastIndexOf(' ');
        if (lastSpace > 100) { // Only if we have enough content
            excerpt = excerpt.substring(0, lastSpace);
        }
        
        return excerpt + "...";
    }

    private AIContentResponse createErrorResponse(String message) {
        AIContentResponse response = new AIContentResponse();
        response.setStatus("error");
        response.setMessage(message);
        return response;
    }

    private String ensureImagesInContent(String topic, String category, String content) {
        try {
            if (content == null || content.isBlank()) return content;
            // If already contains markdown image, return as-is
            if (content.matches("(?s).*!\\[[^\\]]*]\\([^)]*\\).*") ) {
                return content;
            }

            java.util.List<String> urls = pickImageUrls(topic, category, content);
            if (urls.isEmpty()) return content;

            String injected = injectImagesIntoContent(content, urls);
            return injected;
        } catch (Exception ex) {
            return content;
        }
    }

    private String injectImagesIntoContent(String content, java.util.List<String> urls) {
        // Ch√®n ·∫£nh ngay sau c√°c ƒëo·∫°n c√≥ t·ª´ kh√≥a ph√π h·ª£p; n·∫øu kh√¥ng t√¨m th·∫•y th√¨ ch√®n cu·ªëi
        String[] paragraphs = content.split("\r?\n\r?\n+");
        if (paragraphs.length == 0) return content;

        java.util.Set<Integer> usedIdx = new java.util.HashSet<>();
        int urlIdx = 0;

        String[] keywordGroups = new String[]{
            // ∆Øu ti√™n ch√®n sau ƒëo·∫°n n√≥i v·ªÅ m√≥n ƒÉn/healthy/rau qu·∫£
            "salad|healthy|rau|dinh d∆∞·ª°ng|nutrition|vitamin|kho√°ng|b·ªØa ƒÉn|m√≥n ƒÉn",
            // C√¥ng th·ª©c/n·∫•u ƒÉn
            "c√¥ng th·ª©c|recipe|n·∫•u ƒÉn|cooking|b·∫øp",
            // Kh√¥ng gian nh√† h√†ng/Green Kitchen
            "nh√† h√†ng|restaurant|kh√¥ng gian|Green Kitchen|d·ªãch v·ª•",
            // Ng∆∞·ªùi ƒëang n·∫•u ƒÉn / ƒë·∫ßu b·∫øp
            "ƒëang n·∫•u|ng∆∞·ªùi n·∫•u|ƒë·∫ßu b·∫øp|chef|cook|cooking",
            // T√¢m tr·∫°ng kh√≥ ch·ªãu / stress
            "kh√≥ ch·ªãu|stress|cƒÉng th·∫≥ng|m·ªát m·ªèi|lo √¢u",
            // Gia ƒë√¨nh h·∫°nh ph√∫c
            "gia ƒë√¨nh|family|h·∫°nh ph√∫c|tr·∫ª em|kids"
        };

        for (String group : keywordGroups) {
            if (urlIdx >= urls.size()) break;
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(group, java.util.regex.Pattern.CASE_INSENSITIVE | java.util.regex.Pattern.UNICODE_CASE);
            for (int i = 0; i < paragraphs.length && urlIdx < urls.size(); i++) {
                if (usedIdx.contains(i)) continue;
                String para = paragraphs[i];
                if (p.matcher(para).find()) {
                    paragraphs[i] = para + "\n\n" + "![Green Kitchen](" + urls.get(urlIdx) + ")";
                    usedIdx.add(i);
                    urlIdx++;
                }
            }
        }

        // N·∫øu v·∫´n c√≤n URL ch∆∞a ch√®n, th√™m v√†o cu·ªëi b√†i
        if (urlIdx < urls.size()) {
            StringBuilder last = new StringBuilder(paragraphs[paragraphs.length - 1]);
            for (; urlIdx < urls.size(); urlIdx++) {
                last.append("\n\n").append("![Green Kitchen](").append(urls.get(urlIdx)).append(")");
            }
            paragraphs[paragraphs.length - 1] = last.toString();
        }

        String rebuilt = String.join("\n\n", paragraphs);
        log.debug("Injected images contextually; total: {}", urls.size());
        return rebuilt;
    }

    private java.util.List<String> pickImageUrls(String topic, String category, String content) {
        java.util.List<String> result = new java.util.ArrayList<>();
        String ctx = ((topic != null ? topic : "") + " " + (category != null ? category : "") + " " + (content != null ? content : "")).toLowerCase();

        if (ctx.contains("salad") || ctx.contains("healthy") || ctx.contains("salad") || ctx.contains("rau") ) {
            result.add("https://images.unsplash.com/photo-1512621776951-a57141f2eefd?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1540420773420-3366772f4999?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1490645935967-10de6ba17061?auto=format&fit=crop&w=1200&q=80");
        } else if (ctx.contains("n·∫•u ƒÉn") || ctx.contains("cooking") || ctx.contains("c√¥ng th·ª©c") || ctx.contains("recipe")) {
            result.add("https://images.unsplash.com/photo-1504674900247-0877df9cc836?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1600891964599-f61ba0e24092?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1546069901-ba9599a7e63c?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1589307004394-7a54af3a5f34?auto=format&fit=crop&w=1200&q=80");
        } else if (ctx.contains("tr√°i c√¢y") || ctx.contains("fruit") || ctx.contains("smoothie")) {
            result.add("https://images.unsplash.com/photo-1601004890684-d8cbf643f5f2?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1510626176961-4b57d4fbad03?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1502741126161-b048400d1161?auto=format&fit=crop&w=1200&q=80");
        } else if (ctx.contains("nh√† h√†ng") || ctx.contains("restaurant") || ctx.contains("kh√¥ng gian")) {
            result.add("https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1555396273-367ea4eb4db5?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1514933651103-005eec06c04b?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1555396273-367ea4eb4db5?auto=format&fit=crop&w=1400&q=80");
        } else if (ctx.contains("kh√≥ ch·ªãu") || ctx.contains("stress") || ctx.contains("cƒÉng th·∫≥ng") || ctx.contains("m·ªát m·ªèi") || ctx.contains("lo √¢u")) {
            // T√¢m tr·∫°ng kh√≥ ch·ªãu / stress
            result.add("https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1515879218367-8466d910aaa4?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1510022079733-8b58aca7c4ae?auto=format&fit=crop&w=1200&q=80");
        } else if (ctx.contains("gia ƒë√¨nh") || ctx.contains("family") || ctx.contains("h·∫°nh ph√∫c") || ctx.contains("tr·∫ª em") || ctx.contains("kids")) {
            // Gia ƒë√¨nh h·∫°nh ph√∫c
            result.add("https://images.unsplash.com/photo-1511895426328-dc8714191300?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1524504388940-b1c1722653e1?auto=format&fit=crop&w=1200&q=80");
        } else {
            // Fallback to vegetables/organic
            result.add("https://images.unsplash.com/photo-1546554137-f86b9593a222?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1506905925346-21bda4d32df4?auto=format&fit=crop&w=1200&q=80");
            result.add("https://images.unsplash.com/photo-1610832958506-aa56368176cf?auto=format&fit=crop&w=1200&q=80");
        }

        return result;
    }
}
