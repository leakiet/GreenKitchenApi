package com.greenkitchen.portal.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.greenkitchen.portal.dtos.CartScanResponse;
import com.greenkitchen.portal.entities.CartAbandonmentSchedule;

import lombok.extern.slf4j.Slf4j;

import java.util.List;

@Service
@Slf4j
public class CartAbandonmentScheduleExecutorService {

    @Autowired
    private CartScanService cartScanService;

    @Autowired
    private CartAbandonmentScheduleService scheduleService;

    /**
     * Ch·∫°y m·ªói ph√∫t ƒë·ªÉ ki·ªÉm tra v√† th·ª±c hi·ªán c√°c l·ªãch cart abandonment ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
     * Thay th·∫ø cho c√°c @Scheduled c·ªë ƒë·ªãnh tr∆∞·ªõc ƒë√¢y
     */
    @Scheduled(fixedRate = 60000) // M·ªói ph√∫t
    public void processCartAbandonmentSchedules() {
        try {
            List<CartAbandonmentSchedule> activeSchedules = scheduleService.getActiveSchedules();
            java.time.ZoneId zone = java.time.ZoneId.systemDefault();
            java.time.LocalDateTime nowTs = java.time.LocalDateTime.now(zone);
            log.info("[Scheduler Tick] now={} zone={}", nowTs, zone);
            
            if (activeSchedules.isEmpty()) {
                log.info("Kh√¥ng c√≥ l·ªãch cart abandonment n√†o ƒëang ho·∫°t ƒë·ªông");
                return;
            }

            for (CartAbandonmentSchedule schedule : activeSchedules) {

                boolean should = shouldExecuteSchedule(schedule);
                log.debug("Result shouldExecute = {} for schedule id={}", should, schedule.getId());
                if (should) {
                    executeCartAbandonmentSchedule(schedule);
                } else {
                    log.trace("Skip schedule id={} at now={}", schedule.getId(), nowTs);
                }
            }
        } catch (Exception e) {
            log.error("‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω l·ªãch cart abandonment: {}", e.getMessage());
        }
    }

    /**
     * Ki·ªÉm tra xem l·ªãch c√≥ n√™n ƒë∆∞·ª£c th·ª±c hi·ªán kh√¥ng
     */
    private boolean shouldExecuteSchedule(CartAbandonmentSchedule schedule) {
        // ∆Øu ti√™n theo c·∫•u h√¨nh b·∫≠t/t·∫Øt: daily, evening, interval
        if (Boolean.TRUE.equals(schedule.getIsDailyEnabled()) && schedule.getDailyTime() != null) {
            return isTimeToExecuteDaily(schedule.getDailyTime());
        }

        if (Boolean.TRUE.equals(schedule.getIsEveningEnabled()) && schedule.getEveningTime() != null) {
            return isTimeToExecuteDaily(schedule.getEveningTime());
        }

        if (Boolean.TRUE.equals(schedule.getIsIntervalEnabled()) && schedule.getIntervalHours() != null) {
            return isTimeToExecuteHourly(schedule.getIntervalHours());
        }

        return false;
    }

    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i th·ªùi gian th·ª±c hi·ªán l·ªãch h√†ng ng√†y kh√¥ng
     */
    private boolean isTimeToExecuteDaily(java.time.LocalTime scheduleTime) {
        if (scheduleTime == null) return false;
        
        java.time.LocalTime now = java.time.LocalTime.now();
        boolean inWindow = now.isAfter(scheduleTime.minusMinutes(1)) && now.isBefore(scheduleTime.plusMinutes(1));
        log.debug("isTimeToExecuteDaily? now={} scheduleTime={} window=[{}, {}] => {}",
                now, scheduleTime, scheduleTime.minusMinutes(1), scheduleTime.plusMinutes(1), inWindow);
        return inWindow;
    }

    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i th·ªùi gian th·ª±c hi·ªán l·ªãch theo gi·ªù kh√¥ng
     */
    private boolean isTimeToExecuteHourly(Integer frequencyHours) {
        if (frequencyHours == null || frequencyHours <= 0) return false;
        
        java.time.LocalTime now = java.time.LocalTime.now();
        int currentHour = now.getHour();
        
        // Ki·ªÉm tra xem gi·ªù hi·ªán t·∫°i c√≥ chia h·∫øt cho frequency kh√¥ng
        boolean match = currentHour % frequencyHours == 0 && now.getMinute() == 0;
        log.debug("isTimeToExecuteHourly? now={} freqHours={} => {}", now, frequencyHours, match);
        return match;
    }

    /**
     * Th·ª±c hi·ªán l·ªãch cart abandonment
     */
    private void executeCartAbandonmentSchedule(CartAbandonmentSchedule schedule) {
        log.info("üïò B·∫Øt ƒë·∫ßu th·ª±c hi·ªán l·ªãch cart abandonment: {}", 
                schedule.getScheduleName());
        
        try {
            CartScanResponse response = cartScanService.scanAndSendEmails();
            log.info("‚úÖ L·ªãch '{}' ho√†n th√†nh: {} customers ƒë∆∞·ª£c g·ª≠i email", 
                    schedule.getScheduleName(), response.getNewCustomersFound());
        } catch (Exception e) {
            log.error("‚ùå L·ªói trong l·ªãch '{}': {}", schedule.getScheduleName(), e.getMessage());
        }
    }

    /**
     * Manual trigger ƒë·ªÉ test l·ªãch (c√≥ th·ªÉ g·ªçi t·ª´ API)
     */
    public void triggerCartAbandonmentSchedule(Long scheduleId) {
        try {
            List<CartAbandonmentSchedule> active = scheduleService.getActiveSchedules();
            CartAbandonmentSchedule schedule = active.stream()
                .filter(s -> s.getId().equals(scheduleId))
                .findFirst()
                .orElse(null);

            if (schedule == null) {
                log.warn("Kh√¥ng t√¨m th·∫•y l·ªãch ho·∫°t ƒë·ªông v·ªõi ID {}", scheduleId);
                return;
            }

            if (!Boolean.TRUE.equals(schedule.getIsActive())) {
                log.warn("L·ªãch '{}' ƒëang b·ªã t·∫Øt", schedule.getScheduleName());
                return;
            }

            executeCartAbandonmentSchedule(schedule);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi trigger l·ªãch ID {}: {}", scheduleId, e.getMessage());
        }
    }
}
