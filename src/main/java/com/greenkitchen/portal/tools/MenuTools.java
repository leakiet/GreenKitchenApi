package com.greenkitchen.portal.tools;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.ai.tool.annotation.Tool;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;

import com.greenkitchen.portal.dtos.MenuMealLiteResponse;
import com.greenkitchen.portal.dtos.MenuMealResponse;
import com.greenkitchen.portal.dtos.MenuMealsAiResponse;
import com.greenkitchen.portal.enums.MenuMealType;
import com.greenkitchen.portal.services.MenuMealService;

@Slf4j
@Component
public class MenuTools {
	@Autowired
	MenuMealService menuMealService;
	
	@Tool(name = "getMenuMeals", description = """
			***IMPORTANT***: Bu·ªôc tr·∫£ v·ªÅ JSON h·ª£p l·ªá ƒë·ªÉ FE render UI. KH√îNG markdown/HTML/text ngo√†i JSON. KH√îNG d·ªãch/ƒë·ªïi key/ghi b·ªãa d·ªØ li·ªáu trong `menu` (gi·ªØ nguy√™n key ti·∫øng Anh nh∆∞ DB).

			# PURPOSE
			L·∫•y danh s√°ch menu meals (c√°c m√≥n trong menu) c·ªßa Green Kitchen ƒë·ªÉ ph·∫£n h·ªìi ·ªü MENU_JSON_MODE theo Output Contract h·ªá th·ªëng.

			# WHEN TO CALL - CH·ªà g·ªçi khi user h·ªèi C·ª§ TH·ªÇ v·ªÅ:
			‚úÖ "Menu c√≥ g√¨?", "M√≥n n√†o ngon?", "C√≥ m√≥n g√¨?"
			‚úÖ "Gi√° bao nhi√™u?", "Calorie bao nhi√™u?", "Kh·∫©u ph·∫ßn th·∫ø n√†o?"
			‚úÖ "Nguy√™n li·ªáu g√¨?", "Lo·∫°i m√≥n g√¨?", "M√≥n h√¥m nay c√≥ g√¨?"
			‚úÖ T√™n m√≥n c·ª• th·ªÉ: "Salmon", "Beef", "Chicken"
			

			# EXAMPLES:
			User: "Hello" ‚Üí NO tool call, response: "Ch√†o anh/ch·ªã! Em c√≥ th·ªÉ gi√∫p g√¨ ·∫°?"
			User: "Menu c√≥ g√¨?" ‚Üí YES tool call, return menu JSON
			User: "Ch√†o" ‚Üí NO tool call, response: "Ch√†o anh/ch·ªã! Em c√≥ th·ªÉ gi√∫p g√¨ ·∫°?"
			User: "M√≥n n√†o ngon?" ‚Üí YES tool call, return menu JSON

			# PARAMETERS
			- limit (integer, optional): s·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 10. N·∫øu v∆∞·ª£t s·ªë m√≥n hi·ªán c√≥ ‚Üí gi·ªõi h·∫°n theo s·ªë m√≥n hi·ªán c√≥.
			
			# ERROR HANDLING
			- N·∫øu DB r·ªóng: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p.", "menu": []}.
			- N·∫øu x·∫£y ra l·ªói h·ªá th·ªëng: n√©m exception ƒë·ªÉ l·ªõp ngo√†i xin l·ªói ng∆∞·ªùi d√πng; KH√îNG b·ªãa d·ªØ li·ªáu.
			""")
	public MenuMealsAiResponse getMenuMeals(Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info(" Starting getMenuMeals with limit: {}", limit);
		
		try {
			// 1. Database query
			long dbStartTime = System.currentTimeMillis();
			List<MenuMealResponse> allMeals = menuMealService.getAllMenuMeals();
			long dbDuration = System.currentTimeMillis() - dbStartTime;
			log.info("üóÑÔ∏è Database query completed in {}ms", dbDuration);
			
			// 2. Data processing
			long processStartTime = System.currentTimeMillis();
			List<MenuMealResponse> meals = (allMeals == null) ? Collections.emptyList() : allMeals;

			if (meals.isEmpty()) {
				long totalDuration = System.currentTimeMillis() - startTime;
				log.info("‚úÖ getMenuMeals completed in {}ms (DB: {}ms, Processing: {}ms) - No meals found", 
						totalDuration, dbDuration, 0);
				return new MenuMealsAiResponse("Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p.", Collections.emptyList());
			}

			int maxItems = Math.min(limit != null ? limit : 10, meals.size());
			List<MenuMealLiteResponse> limited = meals.stream().limit(maxItems)
				.map(m -> new MenuMealLiteResponse(
					m.getId(),
					m.getTitle(),
					m.getSlug(),
					m.getImage(),
					m.getCarbs(), // carbs ‚Üí carb
					m.getCalories(), // calories ‚Üí calo
					m.getProtein(), // protein
					m.getFat(),
					m.getPrice(),
					m.getMenuIngredients() // menuIngredients ‚Üí menuIngredient
				))
				.toList();

			String content = "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë m√≥n trong menu c·ªßa Green Kitchen ·∫°:";
			long processDuration = System.currentTimeMillis() - processStartTime;
			
			long totalDuration = System.currentTimeMillis() - startTime;
			// Th√™m log ƒë·ªô d√†i content v√† s·ªë ph·∫ßn t·ª≠ menu ƒë·ªÉ theo d√µi k√≠ch th∆∞·ªõc response
			int contentChars = content != null ? content.length() : 0;
			int menuSize = limited.size();
			log.info("‚úÖ getMenuMeals completed in {}ms (DB: {}ms, Processing: {}ms) - Returned {} meals, contentChars={}", 
					totalDuration, dbDuration, processDuration, menuSize, contentChars);

			return new MenuMealsAiResponse(content, limited);
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMeals failed after {}ms: {}", totalDuration, ex.getMessage());
			throw ex;
		}
	}

	@Tool(name = "getMenuMealsByType", description = """
			***IMPORTANT***: Bu·ªôc tr·∫£ v·ªÅ JSON h·ª£p l·ªá ƒë·ªÉ FE render UI. KH√îNG markdown/HTML/text ngo√†i JSON.

			# PURPOSE
			L·∫•y danh s√°ch menu meals theo type c·ª• th·ªÉ (LOW, HIGH, BALANCE, VEGETARIAN) ƒë·ªÉ g·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi m·ª•c ti√™u dinh d∆∞·ª°ng.

			# WHEN TO CALL - G·ªçi khi user c·∫ßn m√≥n ƒÉn theo type c·ª• th·ªÉ:
			‚úÖ "T√¥i mu·ªën gi·∫£m c√¢n, g·ª£i √Ω m√≥n g√¨?" ‚Üí type: LOW
			‚úÖ "T√¥i mu·ªën tƒÉng c√¢n, m√≥n n√†o ph√π h·ª£p?" ‚Üí type: HIGH  
			‚úÖ "M√≥n ƒÉn c√¢n b·∫±ng dinh d∆∞·ª°ng?" ‚Üí type: BALANCE
			‚úÖ "M√≥n chay c√≥ g√¨?" ‚Üí type: VEGETARIAN
			‚úÖ "Ng∆∞·ªùi b√©o n√™n ƒÉn g√¨?" ‚Üí type: LOW
			‚úÖ "Ng∆∞·ªùi g·∫ßy n√™n ƒÉn g√¨?" ‚Üí type: HIGH

			# PARAMETERS
			- type (string, required): Lo·∫°i m√≥n ƒÉn. Ph·∫£i l√† m·ªôt trong: "LOW", "HIGH", "BALANCE", "VEGETARIAN"
			- limit (integer, optional): S·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 10.

			# TYPE MEANINGS:
			- LOW: M√≥n √≠t calorie, ph√π h·ª£p gi·∫£m c√¢n, ng∆∞·ªùi b√©o
			- HIGH: M√≥n nhi·ªÅu calorie, ph√π h·ª£p tƒÉng c√¢n, ng∆∞·ªùi g·∫ßy  
			- BALANCE: M√≥n c√¢n b·∫±ng dinh d∆∞·ª°ng
			- VEGETARIAN: M√≥n chay

			# ERROR HANDLING
			- N·∫øu type kh√¥ng h·ª£p l·ªá: tr·∫£ {"content": "Lo·∫°i m√≥n ƒÉn kh√¥ng h·ª£p l·ªá.", "menu": []}
			- N·∫øu DB r·ªóng: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p v·ªõi lo·∫°i n√†y.", "menu": []}
			""")
	public MenuMealsAiResponse getMenuMealsByType(String type, Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info(" Starting getMenuMealsByType with type: {}, limit: {}", type, limit);
		
		try {
			// 1. Type validation
			long validationStartTime = System.currentTimeMillis();
			MenuMealType mealType;
			try {
				mealType = MenuMealType.valueOf(type.toUpperCase());
			} catch (IllegalArgumentException e) {
				long validationDuration = System.currentTimeMillis() - validationStartTime;
				log.warn("‚ö†Ô∏è Type validation failed in {}ms: {}", validationDuration, e.getMessage());
				return new MenuMealsAiResponse("Lo·∫°i m√≥n ƒÉn kh√¥ng h·ª£p l·ªá. C√°c lo·∫°i c√≥ s·∫µn: LOW, HIGH, BALANCE, VEGETARIAN", Collections.emptyList());
			}
			long validationDuration = System.currentTimeMillis() - validationStartTime;
			log.info("‚úÖ Type validation completed in {}ms", validationDuration);

			// 2. Database query
			long dbStartTime = System.currentTimeMillis();
			List<MenuMealResponse> allMeals = menuMealService.getAllMenuMeals();
			long dbDuration = System.currentTimeMillis() - dbStartTime;
			log.info("üóÑÔ∏è Database query completed in {}ms", dbDuration);

			// 3. Filtering and processing
			long filterStartTime = System.currentTimeMillis();
			List<MenuMealResponse> filteredMeals = allMeals.stream()
				.filter(meal -> meal.getType() == mealType)
				.collect(Collectors.toList());

			if (filteredMeals.isEmpty()) {
				long filterDuration = System.currentTimeMillis() - filterStartTime;
				long totalDuration = System.currentTimeMillis() - startTime;
				log.info("‚úÖ getMenuMealsByType completed in {}ms (Validation: {}ms, DB: {}ms, Filter: {}ms) - No meals found for type {}", 
						totalDuration, validationDuration, dbDuration, filterDuration, type);
				return new MenuMealsAiResponse("Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p v·ªõi lo·∫°i " + type + ".", Collections.emptyList());
			}

			int maxItems = Math.min(limit != null ? limit : 10, filteredMeals.size());
			List<MenuMealLiteResponse> limited = filteredMeals.stream().limit(maxItems)
				.map(m -> new MenuMealLiteResponse(
					m.getId(),
					m.getTitle(),
					m.getSlug(),
					m.getImage(),
					m.getCarbs(), // carbs ‚Üí carb
					m.getCalories(), // calories ‚Üí calo
					m.getProtein(), // protein
					m.getFat(),
					m.getPrice(),
					m.getMenuIngredients() // menuIngredients ‚Üí menuIngredient
				))
				.toList();

			String content = String.format("D∆∞·ªõi ƒë√¢y l√† c√°c m√≥n %s ph√π h·ª£p v·ªõi m·ª•c ti√™u c·ªßa b·∫°n:", type);
			long filterDuration = System.currentTimeMillis() - filterStartTime;
			
			long totalDuration = System.currentTimeMillis() - startTime;
			int contentChars = content != null ? content.length() : 0;
			int menuSize = limited.size();
			log.info("‚úÖ getMenuMealsByType completed in {}ms (Validation: {}ms, DB: {}ms, Filter: {}ms) - Returned {} meals for type {}, contentChars={}", 
					totalDuration, validationDuration, dbDuration, filterDuration, menuSize, type, contentChars);

			return new MenuMealsAiResponse(content, limited);
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMealsByType failed after {}ms: {}", totalDuration, ex.getMessage());
			throw ex;
		}
	}

	@Tool(name = "getMenuMealsForBodyType", description = """
			***IMPORTANT***: Bu·ªôc tr·∫£ v·ªÅ JSON h·ª£p l·ªá ƒë·ªÉ FE render UI. KH√îNG markdown/HTML/text ngo√†i JSON.

			# PURPOSE
			G·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi th·ªÉ tr·∫°ng v√† m·ª•c ti√™u dinh d∆∞·ª°ng c·ªßa ng∆∞·ªùi d√πng.

			# WHEN TO CALL - G·ªçi khi user c·∫ßn t∆∞ v·∫•n dinh d∆∞·ª°ng theo th·ªÉ tr·∫°ng:
			‚úÖ "T√¥i b√©o, mu·ªën gi·∫£m c√¢n" ‚Üí bodyType: "OVERWEIGHT", goal: "LOSE_WEIGHT"
			‚úÖ "T√¥i g·∫ßy, mu·ªën tƒÉng c√¢n" ‚Üí bodyType: "UNDERWEIGHT", goal: "GAIN_WEIGHT"
			‚úÖ "T√¥i mu·ªën duy tr√¨ c√¢n n·∫∑ng" ‚Üí bodyType: "NORMAL", goal: "MAINTAIN"
			‚úÖ "T√¥i mu·ªën tƒÉng c∆°" ‚Üí bodyType: "NORMAL", goal: "BUILD_MUSCLE"

			# PARAMETERS
			- bodyType (string, required): Th·ªÉ tr·∫°ng. Ph·∫£i l√† m·ªôt trong: "OVERWEIGHT", "UNDERWEIGHT", "NORMAL"
			- goal (string, required): M·ª•c ti√™u. Ph·∫£i l√† m·ªôt trong: "LOSE_WEIGHT", "GAIN_WEIGHT", "MAINTAIN", "BUILD_MUSCLE"
			- limit (integer, optional): S·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 8.

			# LOGIC MAPPING:
			- OVERWEIGHT + LOSE_WEIGHT ‚Üí type: LOW (√≠t calorie)
			- UNDERWEIGHT + GAIN_WEIGHT ‚Üí type: HIGH (nhi·ªÅu calorie)
			- NORMAL + MAINTAIN ‚Üí type: BALANCE (c√¢n b·∫±ng)
			- NORMAL + BUILD_MUSCLE ‚Üí type: HIGH (nhi·ªÅu protein)

			# ERROR HANDLING
			- N·∫øu tham s·ªë kh√¥ng h·ª£p l·ªá: tr·∫£ {"content": "Tham s·ªë kh√¥ng h·ª£p l·ªá.", "menu": []}
			- N·∫øu DB r·ªóng: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p.", "menu": []}
			""")
	public MenuMealsAiResponse getMenuMealsForBodyType(String bodyType, String goal, Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info(" Starting getMenuMealsForBodyType with bodyType: {}, goal: {}, limit: {}", bodyType, goal, limit);
		
		try {
			// 1. Parameter validation
			long validationStartTime = System.currentTimeMillis();
			if (!isValidBodyType(bodyType) || !isValidGoal(goal)) {
				long validationDuration = System.currentTimeMillis() - validationStartTime;
				log.warn("‚ö†Ô∏è Parameter validation failed in {}ms: bodyType={}, goal={}", validationDuration, bodyType, goal);
				return new MenuMealsAiResponse("Tham s·ªë kh√¥ng h·ª£p l·ªá. BodyType: OVERWEIGHT/UNDERWEIGHT/NORMAL, Goal: LOSE_WEIGHT/GAIN_WEIGHT/MAINTAIN/BUILD_MUSCLE", Collections.emptyList());
			}
			long validationDuration = System.currentTimeMillis() - validationStartTime;
			log.info("‚úÖ Parameter validation completed in {}ms", validationDuration);

			// 2. Determine meal type
			long logicStartTime = System.currentTimeMillis();
			MenuMealType targetType = determineMealType(bodyType, goal);
			long logicDuration = System.currentTimeMillis() - logicStartTime;
			log.info("üß† Logic mapping completed in {}ms: {} + {} ‚Üí {}", logicDuration, bodyType, goal, targetType);
			
			// 3. Get meals by type
			long totalDuration = System.currentTimeMillis() - startTime;
			log.info("‚úÖ getMenuMealsForBodyType completed in {}ms (Validation: {}ms, Logic: {}ms) - Delegating to getMenuMealsByType", 
					totalDuration, validationDuration, logicDuration);
			
			return getMenuMealsByType(targetType.name(), limit);
			
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMealsForBodyType failed after {}ms: {}", totalDuration, ex.getMessage());
			throw ex;
		}
	}

	// Helper methods
	private boolean isValidBodyType(String bodyType) {
		return bodyType != null && (bodyType.equals("OVERWEIGHT") || bodyType.equals("UNDERWEIGHT") || bodyType.equals("NORMAL"));
	}

	private boolean isValidGoal(String goal) {
		return goal != null && (goal.equals("LOSE_WEIGHT") || goal.equals("GAIN_WEIGHT") || goal.equals("MAINTAIN") || goal.equals("BUILD_MUSCLE"));
	}

	private MenuMealType determineMealType(String bodyType, String goal) {
		if ("OVERWEIGHT".equals(bodyType) && "LOSE_WEIGHT".equals(goal)) {
			return MenuMealType.LOW; // Ng∆∞·ªùi b√©o mu·ªën gi·∫£m c√¢n ‚Üí m√≥n √≠t calorie
		} else if ("UNDERWEIGHT".equals(bodyType) && "GAIN_WEIGHT".equals(goal)) {
			return MenuMealType.HIGH; // Ng∆∞·ªùi g·∫ßy mu·ªën tƒÉng c√¢n ‚Üí m√≥n nhi·ªÅu calorie
		} else if ("NORMAL".equals(bodyType) && "MAINTAIN".equals(goal)) {
			return MenuMealType.BALANCE; // Duy tr√¨ c√¢n n·∫∑ng ‚Üí m√≥n c√¢n b·∫±ng
		} else if ("NORMAL".equals(bodyType) && "BUILD_MUSCLE".equals(goal)) {
			return MenuMealType.HIGH; // TƒÉng c∆° ‚Üí m√≥n nhi·ªÅu calorie v√† protein
		} else {
			return MenuMealType.BALANCE; // Default fallback
		}
	}
}