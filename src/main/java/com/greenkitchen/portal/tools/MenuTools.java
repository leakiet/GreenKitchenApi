package com.greenkitchen.portal.tools;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.ai.tool.annotation.Tool;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;

import com.greenkitchen.portal.dtos.MenuMealLiteResponse;
import com.greenkitchen.portal.dtos.MenuMealResponse;
import com.greenkitchen.portal.dtos.MenuMealsAiResponse;
import com.greenkitchen.portal.enums.MenuMealType;
import com.greenkitchen.portal.services.MenuMealService;
import com.greenkitchen.portal.dtos.ChatResponse;
import com.greenkitchen.portal.enums.ConversationStatus;
import com.greenkitchen.portal.enums.MessageStatus;
import com.greenkitchen.portal.repositories.ConversationRepository;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import jakarta.persistence.EntityNotFoundException;
import java.time.LocalDateTime;
import com.greenkitchen.portal.dtos.EmpNotifyPayload;
import org.springframework.cache.annotation.CacheEvict;

@Slf4j
@Component
public class MenuTools {
	@Autowired
	MenuMealService menuMealService;
    @Autowired
    ConversationRepository conversationRepo;
    @Autowired
    SimpMessagingTemplate messagingTemplate;
	
	@Tool(name = "getMenuMeals", description = """
			***CRITICAL***: CH·ªà g·ªçi tool n√†y khi user H·ªéI C·ª§ TH·ªÇ v·ªÅ menu/food/nutrition. KH√îNG g·ªçi cho greetings, chitchat, ho·∫∑c c√¢u h·ªèi chung.

			# PURPOSE
			L·∫•y danh s√°ch menu meals c·ªßa Green Kitchen ƒë·ªÉ tr·∫£ v·ªÅ JSON h·ª£p l·ªá cho FE render UI.

			# IMPORTANT DATA STRUCTURE INFO:
			- Field `description` CH·ª®A LU√îN NGUY√äN LI·ªÜU c·ªßa m√≥n ƒÉn
			- Field `menuIngredients` ƒë√£ b·ªã H·ª¶Y B·ªé - KH√îNG s·ª≠ d·ª•ng field n√†y
			- Khi user h·ªèi v·ªÅ nguy√™n li·ªáu (b√≤, g√†, t√¥m, c√°...), t√¨m ki·∫øm trong field `description` v√† `title`
			- QUAN TR·ªåNG: T√¨m ki·∫øm T·∫§T C·∫¢ t·ª´ ƒë·ªìng nghƒ©a c·ªßa nguy√™n li·ªáu:
			  * "t√¥m" = "shrimp" = "prawns" = "prawn"
			  * "c√°" = "fish" = "salmon" = "tuna"
			  * "b√≤" = "beef" = "wagyu" = "steak"
			  * "g√†" = "chicken" = "poultry"
			- N·∫øu kh√¥ng t√¨m th·∫•y nguy√™n li·ªáu trong `description` ho·∫∑c `title` ‚Üí tr·∫£ v·ªÅ "kh√¥ng c√≥ m√≥n ƒë√≥"

			# WHEN TO CALL - CH·ªà g·ªçi khi user h·ªèi C·ª§ TH·ªÇ v·ªÅ:
			‚úÖ Vietnamese: "Menu c√≥ g√¨?", "M√≥n n√†o ngon?", "C√≥ m√≥n g√¨?", "Gi√° bao nhi√™u?", "Calorie bao nhi√™u?", "Kh·∫©u ph·∫ßn th·∫ø n√†o?", "Nguy√™n li·ªáu g√¨?", "Lo·∫°i m√≥n g√¨?", "M√≥n h√¥m nay c√≥ g√¨?", "T√™n m√≥n c·ª• th·ªÉ", "C√≥ m√≥n b√≤ kh√¥ng?", "C√≥ m√≥n g√† kh√¥ng?"
			‚úÖ English: "What's on the menu?", "What food do you have?", "What meals are available?", "What are the prices?", "How many calories?", "What ingredients?", "What types of meals?", "Show me the menu", "Do you have beef dishes?", "Do you have chicken dishes?"

			# WHEN NOT TO CALL - TUY·ªÜT ƒê·ªêI KH√îNG g·ªçi khi:
			‚ùå Vietnamese: "Hello", "Hi", "Ch√†o", "B·∫°n kh·ªèe kh√¥ng?", "C·∫£m ∆°n", "OK", "Test", "B·∫°n c√≥ th·ªÉ gi√∫p kh√¥ng?", "B·∫°n l√†m ƒë∆∞·ª£c g√¨?"
			‚ùå English: "Hello", "Hi", "How are you?", "Thanks", "Thank you", "OK", "Test", "Can you help?", "What can you do?", "How are you doing?"

			# EXAMPLES:
			User: "Hello" ‚Üí NO tool call, response: "Ch√†o anh/ch·ªã! Em c√≥ th·ªÉ gi√∫p g√¨ ·∫°?"
			User: "Menu c√≥ g√¨?" ‚Üí YES tool call, return menu JSON
			User: "C√≥ m√≥n b√≤ kh√¥ng?" ‚Üí YES tool call, filter by description containing "b√≤", "beef", "wagyu", "steak"
			User: "C√≥ m√≥n t√¥m kh√¥ng?" ‚Üí YES tool call, filter by description containing "t√¥m", "shrimp", "prawns", "prawn"
			User: "C√≥ m√≥n shrimp kh√¥ng?" ‚Üí YES tool call, filter by description containing "t√¥m", "shrimp", "prawns", "prawn"
			User: "C√≥ m√≥n prawns kh√¥ng?" ‚Üí YES tool call, filter by description containing "t√¥m", "shrimp", "prawns", "prawn"
			User: "Ch√†o" ‚Üí NO tool call, response: "Ch√†o anh/ch·ªã! Em c√≥ th·ªÉ gi√∫p g√¨ ·∫°?"
			User: "How are you?" ‚Üí NO tool call, response: "I'm doing well, thank you! How can I help you today?"

			# PARAMETERS
			- limit (integer, optional): s·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 4. Lu√¥n gi·ªõi h·∫°n t·ªëi ƒëa 4.
			
			# ERROR HANDLING
			- N·∫øu DB r·ªóng: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p.", "menu": []}.
			- N·∫øu x·∫£y ra l·ªói h·ªá th·ªëng: n√©m exception ƒë·ªÉ l·ªõp ngo√†i xin l·ªói ng∆∞·ªùi d√πng.
			""")
	public MenuMealsAiResponse getMenuMeals(Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info(" Starting getMenuMeals with limit: {}", limit);
		
		try {
			// 1. Database query
			long dbStartTime = System.currentTimeMillis();
			List<MenuMealResponse> allMeals = menuMealService.getAllMenuMeals();
			long dbDuration = System.currentTimeMillis() - dbStartTime;
			log.info("üóÑÔ∏è Database query completed in {}ms", dbDuration);
			
			// 2. Data processing
			long processStartTime = System.currentTimeMillis();
			List<MenuMealResponse> meals = (allMeals == null) ? Collections.emptyList() : allMeals;

			if (meals.isEmpty()) {
				long totalDuration = System.currentTimeMillis() - startTime;
				log.info("‚úÖ getMenuMeals completed in {}ms (DB: {}ms, Processing: {}ms) - No meals found", 
						totalDuration, dbDuration, 0);
				return new MenuMealsAiResponse("Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p.", Collections.emptyList());
			}

			int requested = (limit != null ? limit : 4);
			int maxItems = Math.min(Math.min(requested, 4), meals.size());
			List<MenuMealLiteResponse> limited = meals.stream().limit(maxItems)
				.map(m -> new MenuMealLiteResponse(
					m.getId(),
					m.getTitle(),
					m.getSlug(),
					m.getImage(),
					m.getDescription(), // DESCRIPTION CH·ª®A NGUY√äN LI·ªÜU - AI n√™n t√¨m ki·∫øm nguy√™n li·ªáu trong field n√†y
					m.getCarbs(), // carbs ‚Üí carb
					m.getCalories(), // calories ‚Üí calo
					m.getProtein(), // protein
					m.getFat(),
					m.getPrice(),
					null // menuIngredients ƒë√£ b·ªã h·ªßy b·ªè - s·ª≠ d·ª•ng description thay th·∫ø
				))
				.toList();

			String content = "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë m√≥n trong menu c·ªßa Green Kitchen ·∫°:";
			long processDuration = System.currentTimeMillis() - processStartTime;
			
			long totalDuration = System.currentTimeMillis() - startTime;
			// Th√™m log ƒë·ªô d√†i content v√† s·ªë ph·∫ßn t·ª≠ menu ƒë·ªÉ theo d√µi k√≠ch th∆∞·ªõc response
			int contentChars = content != null ? content.length() : 0;
			int menuSize = limited.size();
			log.info("‚úÖ getMenuMeals completed in {}ms (DB: {}ms, Processing: {}ms) - Returned {} meals, contentChars={}", 
					totalDuration, dbDuration, processDuration, menuSize, contentChars);

			return new MenuMealsAiResponse(content, limited);
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMeals failed after {}ms: {}", totalDuration, ex.getMessage());
			throw ex;
		}
	}

	@Tool(name = "getMenuMealsByType", description = """
			***CRITICAL***: CH·ªà g·ªçi tool n√†y khi user H·ªéI C·ª§ TH·ªÇ v·ªÅ lo·∫°i m√≥n ƒÉn theo m·ª•c ti√™u dinh d∆∞·ª°ng. KH√îNG g·ªçi cho greetings, chitchat, ho·∫∑c c√¢u h·ªèi chung.

			# PURPOSE
			L·∫•y danh s√°ch menu meals theo type c·ª• th·ªÉ (LOW, HIGH, BALANCE, VEGETARIAN) ƒë·ªÉ g·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi m·ª•c ti√™u dinh d∆∞·ª°ng.

			# WHEN TO CALL - CH·ªà g·ªçi khi user h·ªèi C·ª§ TH·ªÇ v·ªÅ lo·∫°i m√≥n ƒÉn:
			‚úÖ Vietnamese: "T√¥i mu·ªën gi·∫£m c√¢n, g·ª£i √Ω m√≥n g√¨?", "T√¥i mu·ªën tƒÉng c√¢n, m√≥n n√†o ph√π h·ª£p?", "M√≥n ƒÉn c√¢n b·∫±ng dinh d∆∞·ª°ng?", "M√≥n chay c√≥ g√¨?", "Ng∆∞·ªùi b√©o n√™n ƒÉn g√¨?", "Ng∆∞·ªùi g·∫ßy n√™n ƒÉn g√¨?", "M√≥n √≠t calorie", "M√≥n nhi·ªÅu calorie"
			‚úÖ English: "I want to lose weight, what meals?", "I want to gain weight, what food?", "Balanced nutrition meals?", "Vegetarian options?", "Low calorie meals?", "High calorie meals?", "Healthy meals for weight loss/gain"

			# WHEN NOT TO CALL - TUY·ªÜT ƒê·ªêI KH√îNG g·ªçi khi:
			‚ùå Vietnamese: "Hello", "Hi", "Ch√†o", "B·∫°n kh·ªèe kh√¥ng?", "C·∫£m ∆°n", "OK", "Test", "B·∫°n c√≥ th·ªÉ gi√∫p kh√¥ng?"
			‚ùå English: "Hello", "Hi", "How are you?", "Thanks", "Thank you", "OK", "Test", "Can you help?", "What can you do?"

			# PARAMETERS
			- type (string, required): Lo·∫°i m√≥n ƒÉn. Ph·∫£i l√† m·ªôt trong: "LOW", "HIGH", "BALANCE", "VEGETARIAN"
			- limit (integer, optional): S·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 4. Lu√¥n gi·ªõi h·∫°n t·ªëi ƒëa 4.

			# TYPE MEANINGS:
			- LOW: M√≥n √≠t calorie, ph√π h·ª£p gi·∫£m c√¢n, ng∆∞·ªùi b√©o
			- HIGH: M√≥n nhi·ªÅu calorie, ph√π h·ª£p tƒÉng c√¢n, ng∆∞·ªùi g·∫ßy  
			- BALANCE: M√≥n c√¢n b·∫±ng dinh d∆∞·ª°ng
			- VEGETARIAN: M√≥n chay

			# ERROR HANDLING
			- N·∫øu type kh√¥ng h·ª£p l·ªá: tr·∫£ {"content": "Lo·∫°i m√≥n ƒÉn kh√¥ng h·ª£p l·ªá.", "menu": []}
			- N·∫øu DB r·ªóng: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p v·ªõi lo·∫°i n√†y.", "menu": []}
			""")
	public MenuMealsAiResponse getMenuMealsByType(String type, Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info(" Starting getMenuMealsByType with type: {}, limit: {}", type, limit);
		
		try {
			// 1. Type validation
			long validationStartTime = System.currentTimeMillis();
			MenuMealType mealType;
			try {	
				mealType = MenuMealType.valueOf(type.toUpperCase());
			} catch (IllegalArgumentException e) {
				long validationDuration = System.currentTimeMillis() - validationStartTime;
				log.warn("‚ö†Ô∏è Type validation failed in {}ms: {}", validationDuration, e.getMessage());
				return new MenuMealsAiResponse("Lo·∫°i m√≥n ƒÉn kh√¥ng h·ª£p l·ªá. C√°c lo·∫°i c√≥ s·∫µn: LOW, HIGH, BALANCE, VEGETARIAN", Collections.emptyList());
			}
			long validationDuration = System.currentTimeMillis() - validationStartTime;
			log.info("‚úÖ Type validation completed in {}ms", validationDuration);

			// 2. Database query
			long dbStartTime = System.currentTimeMillis();
			List<MenuMealResponse> allMeals = menuMealService.getAllMenuMeals();
			long dbDuration = System.currentTimeMillis() - dbStartTime;
			log.info("üóÑÔ∏è Database query completed in {}ms", dbDuration);

			// 3. Filtering and processing
			long filterStartTime = System.currentTimeMillis();
			List<MenuMealResponse> filteredMeals = allMeals.stream()
				.filter(meal -> meal.getType() == mealType)
				.collect(Collectors.toList());

			if (filteredMeals.isEmpty()) {
				long filterDuration = System.currentTimeMillis() - filterStartTime;
				long totalDuration = System.currentTimeMillis() - startTime;
				log.info("‚úÖ getMenuMealsByType completed in {}ms (Validation: {}ms, DB: {}ms, Filter: {}ms) - No meals found for type {}", 
						totalDuration, validationDuration, dbDuration, filterDuration, type);
				return new MenuMealsAiResponse("Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p v·ªõi lo·∫°i " + type + ".", Collections.emptyList());
			}

			int requested = (limit != null ? limit : 4);
			int maxItems = Math.min(Math.min(requested, 4), filteredMeals.size());
			List<MenuMealLiteResponse> limited = filteredMeals.stream().limit(maxItems)
				.map(m -> new MenuMealLiteResponse(
					m.getId(),
					m.getTitle(),
					m.getSlug(),
					m.getImage(),
					m.getDescription(), // DESCRIPTION CH·ª®A NGUY√äN LI·ªÜU - AI n√™n t√¨m ki·∫øm nguy√™n li·ªáu trong field n√†y
					m.getCarbs(), // carbs ‚Üí carb
					m.getCalories(), // calories ‚Üí calo
					m.getProtein(), // protein
					m.getFat(),
					m.getPrice(),
					null // menuIngredients ƒë√£ b·ªã h·ªßy b·ªè - s·ª≠ d·ª•ng description thay th·∫ø
				))
				.toList();

			String content = String.format("D∆∞·ªõi ƒë√¢y l√† c√°c m√≥n %s ph√π h·ª£p v·ªõi m·ª•c ti√™u c·ªßa b·∫°n:", type);
			long filterDuration = System.currentTimeMillis() - filterStartTime;
			
			long totalDuration = System.currentTimeMillis() - startTime;
			int contentChars = content != null ? content.length() : 0;
			int menuSize = limited.size();
			log.info("‚úÖ getMenuMealsByType completed in {}ms (Validation: {}ms, DB: {}ms, Filter: {}ms) - Returned {} meals for type {}, contentChars={}", 
					totalDuration, validationDuration, dbDuration, filterDuration, menuSize, type, contentChars);

			return new MenuMealsAiResponse(content, limited);
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMealsByType failed after {}ms: {}", totalDuration, ex.getMessage());
			throw ex;
		}
	}

	@Tool(name = "getMenuMealsForBodyType", description = """
			***CRITICAL***: CH·ªà g·ªçi tool n√†y khi user H·ªéI C·ª§ TH·ªÇ v·ªÅ t∆∞ v·∫•n dinh d∆∞·ª°ng theo th·ªÉ tr·∫°ng. KH√îNG g·ªçi cho greetings, chitchat, ho·∫∑c c√¢u h·ªèi chung.

			# PURPOSE
			G·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi th·ªÉ tr·∫°ng v√† m·ª•c ti√™u dinh d∆∞·ª°ng c·ªßa ng∆∞·ªùi d√πng.

			# WHEN TO CALL - CH·ªà g·ªçi khi user h·ªèi C·ª§ TH·ªÇ v·ªÅ t∆∞ v·∫•n dinh d∆∞·ª°ng theo th·ªÉ tr·∫°ng:
			‚úÖ Vietnamese: "T√¥i b√©o, mu·ªën gi·∫£m c√¢n", "T√¥i g·∫ßy, mu·ªën tƒÉng c√¢n", "T√¥i mu·ªën duy tr√¨ c√¢n n·∫∑ng", "T√¥i mu·ªën tƒÉng c∆°", "Ng∆∞·ªùi b√©o n√™n ƒÉn g√¨?", "Ng∆∞·ªùi g·∫ßy n√™n ƒÉn g√¨?", "M√≥n ƒÉn cho ng∆∞·ªùi mu·ªën gi·∫£m c√¢n", "M√≥n ƒÉn cho ng∆∞·ªùi mu·ªën tƒÉng c√¢n"
			‚úÖ English: "I'm overweight, want to lose weight", "I'm underweight, want to gain weight", "I want to maintain weight", "I want to build muscle", "Food for weight loss", "Food for weight gain", "Meals for overweight people", "Meals for underweight people"

			# WHEN NOT TO CALL - TUY·ªÜT ƒê·ªêI KH√îNG g·ªçi khi:
			‚ùå Vietnamese: "Hello", "Hi", "Ch√†o", "B·∫°n kh·ªèe kh√¥ng?", "C·∫£m ∆°n", "OK", "Test", "B·∫°n c√≥ th·ªÉ gi√∫p kh√¥ng?"
			‚ùå English: "Hello", "Hi", "How are you?", "Thanks", "Thank you", "OK", "Test", "Can you help?", "What can you do?"

			# PARAMETERS
			- bodyType (string, required): Th·ªÉ tr·∫°ng. Ph·∫£i l√† m·ªôt trong: "OVERWEIGHT", "UNDERWEIGHT", "NORMAL"
			- goal (string, required): M·ª•c ti√™u. Ph·∫£i l√† m·ªôt trong: "LOSE_WEIGHT", "GAIN_WEIGHT", "MAINTAIN", "BUILD_MUSCLE"
			- limit (integer, optional): S·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 4. Lu√¥n gi·ªõi h·∫°n t·ªëi ƒëa 4.

			# LOGIC MAPPING:
			- OVERWEIGHT + LOSE_WEIGHT ‚Üí type: LOW (√≠t calorie)
			- UNDERWEIGHT + GAIN_WEIGHT ‚Üí type: HIGH (nhi·ªÅu calorie)
			- NORMAL + MAINTAIN ‚Üí type: BALANCE (c√¢n b·∫±ng)
			- NORMAL + BUILD_MUSCLE ‚Üí type: HIGH (nhi·ªÅu protein)

			# ERROR HANDLING
			- N·∫øu tham s·ªë kh√¥ng h·ª£p l·ªá: tr·∫£ {"content": "Tham s·ªë kh√¥ng h·ª£p l·ªá.", "menu": []}
			- N·∫øu DB r·ªóng: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p.", "menu": []}
			""")
	public MenuMealsAiResponse getMenuMealsForBodyType(String bodyType, String goal, Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info(" Starting getMenuMealsForBodyType with bodyType: {}, goal: {}, limit: {}", bodyType, goal, limit);
		
		try {
			// 1. Parameter validation
			long validationStartTime = System.currentTimeMillis();
			if (!isValidBodyType(bodyType) || !isValidGoal(goal)) {
				long validationDuration = System.currentTimeMillis() - validationStartTime;
				log.warn("‚ö†Ô∏è Parameter validation failed in {}ms: bodyType={}, goal={}", validationDuration, bodyType, goal);
				return new MenuMealsAiResponse("Tham s·ªë kh√¥ng h·ª£p l·ªá. BodyType: OVERWEIGHT/UNDERWEIGHT/NORMAL, Goal: LOSE_WEIGHT/GAIN_WEIGHT/MAINTAIN/BUILD_MUSCLE", Collections.emptyList());
			}
			long validationDuration = System.currentTimeMillis() - validationStartTime;
			log.info("‚úÖ Parameter validation completed in {}ms", validationDuration);

			// 2. Determine meal type
			long logicStartTime = System.currentTimeMillis();
			MenuMealType targetType = determineMealType(bodyType, goal);
			long logicDuration = System.currentTimeMillis() - logicStartTime;
			log.info("üß† Logic mapping completed in {}ms: {} + {} ‚Üí {}", logicDuration, bodyType, goal, targetType);
			
			// 3. Get meals by type
			long totalDuration = System.currentTimeMillis() - startTime;
			log.info("‚úÖ getMenuMealsForBodyType completed in {}ms (Validation: {}ms, Logic: {}ms) - Delegating to getMenuMealsByType", 
					totalDuration, validationDuration, logicDuration);
			
			return getMenuMealsByType(targetType.name(), limit);
			
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMealsForBodyType failed after {}ms: {}", totalDuration, ex.getMessage());
			throw ex;
		}
	}

	// Helper methods
	private boolean isValidBodyType(String bodyType) {
		return bodyType != null && (bodyType.equals("OVERWEIGHT") || bodyType.equals("UNDERWEIGHT") || bodyType.equals("NORMAL"));
	}

	private boolean isValidGoal(String goal) {
		return goal != null && (goal.equals("LOSE_WEIGHT") || goal.equals("GAIN_WEIGHT") || goal.equals("MAINTAIN") || goal.equals("BUILD_MUSCLE"));
	}

	private MenuMealType determineMealType(String bodyType, String goal) {
		if ("OVERWEIGHT".equals(bodyType) && "LOSE_WEIGHT".equals(goal)) {
			return MenuMealType.LOW; // Ng∆∞·ªùi b√©o mu·ªën gi·∫£m c√¢n ‚Üí m√≥n √≠t calorie
		} else if ("UNDERWEIGHT".equals(bodyType) && "GAIN_WEIGHT".equals(goal)) {
			return MenuMealType.HIGH; // Ng∆∞·ªùi g·∫ßy mu·ªën tƒÉng c√¢n ‚Üí m√≥n nhi·ªÅu calorie
		} else if ("NORMAL".equals(bodyType) && "MAINTAIN".equals(goal)) {
			return MenuMealType.BALANCE; // Duy tr√¨ c√¢n n·∫∑ng ‚Üí m√≥n c√¢n b·∫±ng
		} else if ("NORMAL".equals(bodyType) && "BUILD_MUSCLE".equals(goal)) {
			return MenuMealType.HIGH; // TƒÉng c∆° ‚Üí m√≥n nhi·ªÅu calorie v√† protein
		} else {
			return MenuMealType.BALANCE; // Default fallback
		}
	}

	@Tool(name = "getMenuMealsByIngredient", description = """
			***CRITICAL***: CH·ªà g·ªçi tool n√†y khi user H·ªéI C·ª§ TH·ªÇ v·ªÅ nguy√™n li·ªáu trong m√≥n ƒÉn. KH√îNG g·ªçi cho greetings, chitchat, ho·∫∑c c√¢u h·ªèi chung.

			# PURPOSE
			L·∫•y danh s√°ch menu meals ch·ª©a nguy√™n li·ªáu c·ª• th·ªÉ ƒë·ªÉ t∆∞ v·∫•n m√≥n ƒÉn ph√π h·ª£p.

			# WHEN TO CALL - CH·ªà g·ªçi khi user h·ªèi C·ª§ TH·ªÇ v·ªÅ nguy√™n li·ªáu:
			‚úÖ Vietnamese: "C√≥ m√≥n t√¥m kh√¥ng?", "C√≥ m√≥n b√≤ kh√¥ng?", "C√≥ m√≥n g√† kh√¥ng?", "C√≥ m√≥n c√° kh√¥ng?", "C√≥ m√≥n h·∫£i s·∫£n kh√¥ng?", "C√≥ m√≥n rau c·ªß kh√¥ng?"
			‚úÖ English: "Do you have shrimp dishes?", "Do you have beef dishes?", "Do you have chicken dishes?", "Do you have fish dishes?", "Do you have seafood dishes?", "Do you have vegetable dishes?"

			# WHEN NOT TO CALL - TUY·ªÜT ƒê·ªêI KH√îNG g·ªçi khi:
			‚ùå Vietnamese: "Hello", "Hi", "Ch√†o", "B·∫°n kh·ªèe kh√¥ng?", "C·∫£m ∆°n", "OK", "Test", "B·∫°n c√≥ th·ªÉ gi√∫p kh√¥ng?"
			‚ùå English: "Hello", "Hi", "How are you?", "Thanks", "Thank you", "OK", "Test", "Can you help?", "What can you do?"

			# PARAMETERS
			- ingredient (string, required): Nguy√™n li·ªáu c·∫ßn t√¨m (v√≠ d·ª•: "t√¥m", "shrimp", "prawns", "b√≤", "beef", "g√†", "chicken")
			- limit (integer, optional): S·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 4. Lu√¥n gi·ªõi h·∫°n t·ªëi ƒëa 4.

			# T·ª™ ƒê·ªíNG NGHƒ®A ƒê∆Ø·ª¢C H·ªñ TR·ª¢:
			- T√¥m: "t√¥m", "shrimp", "prawns", "prawn", "lobster", "crayfish"
			- C√°: "c√°", "fish", "salmon", "tuna", "cod", "sea bass"
			- B√≤: "b√≤", "beef", "wagyu", "steak", "prime rib"
			- G√†: "g√†", "chicken", "poultry", "hen"
			- H·∫£i s·∫£n: "h·∫£i s·∫£n", "seafood", "t√¥m", "c√°", "cua", "m·ª±c", "b·∫°ch tu·ªôc"

			# EXAMPLES:
			User: "C√≥ m√≥n t√¥m kh√¥ng?" ‚Üí ingredient="t√¥m", t√¨m t·∫•t c·∫£ t·ª´ ƒë·ªìng nghƒ©a c·ªßa t√¥m
			User: "C√≥ m√≥n shrimp kh√¥ng?" ‚Üí ingredient="shrimp", t√¨m t·∫•t c·∫£ t·ª´ ƒë·ªìng nghƒ©a c·ªßa t√¥m
			User: "C√≥ m√≥n prawns kh√¥ng?" ‚Üí ingredient="prawns", t√¨m t·∫•t c·∫£ t·ª´ ƒë·ªìng nghƒ©a c·ªßa t√¥m
			User: "C√≥ m√≥n b√≤ kh√¥ng?" ‚Üí ingredient="b√≤", t√¨m t·∫•t c·∫£ t·ª´ ƒë·ªìng nghƒ©a c·ªßa b√≤

			# ERROR HANDLING
			- N·∫øu kh√¥ng c√≥ m√≥n ph√π h·ª£p: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ch·ª©a nguy√™n li·ªáu n√†y.", "menu": []}
			- N·∫øu x·∫£y ra l·ªói h·ªá th·ªëng: n√©m exception ƒë·ªÉ l·ªõp ngo√†i xin l·ªói ng∆∞·ªùi d√πng.
			""")
	@CacheEvict(value = "menuMeals", allEntries = true)
	public MenuMealsAiResponse getMenuMealsByIngredient(String ingredient, Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info("üöÄ Starting getMenuMealsByIngredient with ingredient: {}, limit: {}", ingredient, limit);
		
		try {
			// 1. Database query with early limit to improve performance
			long dbStartTime = System.currentTimeMillis();
			int maxLimit = Math.min(limit != null ? limit * 2 : 20, 50); // L·∫•y nhi·ªÅu h∆°n ƒë·ªÉ l·ªçc, nh∆∞ng gi·ªõi h·∫°n t·ªëi ƒëa
			List<MenuMealResponse> allMeals = menuMealService.getAllMenuMeals();
			long dbDuration = System.currentTimeMillis() - dbStartTime;
			log.info("üóÑÔ∏è Database query completed in {}ms, retrieved {} meals", dbDuration, allMeals.size());
			
			// 2. Fast filtering with early termination
			long filterStartTime = System.currentTimeMillis();
			String searchIngredient = ingredient.toLowerCase();
			List<MenuMealResponse> filteredMeals = new java.util.ArrayList<>();
			
			for (MenuMealResponse meal : allMeals) {
				if (filteredMeals.size() >= maxLimit) break; // Early termination
				
				String description = meal.getDescription() != null ? meal.getDescription().toLowerCase() : "";
				String title = meal.getTitle() != null ? meal.getTitle().toLowerCase() : "";
				
				if (containsIngredient(description, title, searchIngredient)) {
					filteredMeals.add(meal);
				}
			}

			if (filteredMeals.isEmpty()) {
				long filterDuration = System.currentTimeMillis() - filterStartTime;
				long totalDuration = System.currentTimeMillis() - startTime;
				log.info("‚úÖ getMenuMealsByIngredient completed in {}ms (DB: {}ms, Filter: {}ms) - No meals found for ingredient: {}", 
						totalDuration, dbDuration, filterDuration, ingredient);
				return new MenuMealsAiResponse("Hi·ªán ch∆∞a c√≥ m√≥n ch·ª©a " + ingredient + ".", Collections.emptyList());
			}

			// 3. Fast mapping with limit
			int requested = (limit != null ? limit : 4);
			int finalLimit = Math.min(Math.min(requested, 4), filteredMeals.size());
			List<MenuMealLiteResponse> limited = new java.util.ArrayList<>();
			
			for (int i = 0; i < finalLimit; i++) {
				MenuMealResponse m = filteredMeals.get(i);
				limited.add(new MenuMealLiteResponse(
					m.getId(),
					m.getTitle(),
					m.getSlug(),
					m.getImage(),
					m.getDescription(),
					m.getCarbs(),
					m.getCalories(),
					m.getProtein(),
					m.getFat(),
					m.getPrice(),
					null
				));
			}

			// 4. Generate content
			String content = String.format("D∆∞·ªõi ƒë√¢y l√† c√°c m√≥n c√≥ %s:", ingredient);
			long filterDuration = System.currentTimeMillis() - filterStartTime;
			
			long totalDuration = System.currentTimeMillis() - startTime;
			int menuSize = limited.size();
			log.info("‚úÖ getMenuMealsByIngredient completed in {}ms (DB: {}ms, Filter: {}ms) - Returned {} meals", 
					totalDuration, dbDuration, filterDuration, menuSize);

			return new MenuMealsAiResponse(content, limited);
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMealsByIngredient failed after {}ms: {}", totalDuration, ex.getMessage());
			// Return empty response instead of throwing exception to prevent timeout
			return new MenuMealsAiResponse("Xin l·ªói, hi·ªán t·∫°i kh√¥ng th·ªÉ t√¨m ki·∫øm m√≥n ƒÉn. Vui l√≤ng th·ª≠ l·∫°i sau.", Collections.emptyList());
		}
	}

	// Helper method to check if meal contains ingredient with synonyms - OPTIMIZED
	private boolean containsIngredient(String description, String title, String searchIngredient) {
		// Fast path: check direct match first
		if (description.contains(searchIngredient) || title.contains(searchIngredient)) {
			return true;
		}
		
		// T·ª´ ƒë·ªìng nghƒ©a cho t√¥m - optimized
		if (isShrimpRelated(searchIngredient)) {
			return containsAny(description, title, "t√¥m", "shrimp", "prawns", "prawn");
		}
		
		// T·ª´ ƒë·ªìng nghƒ©a cho c√° - optimized
		if (isFishRelated(searchIngredient)) {
			return containsAny(description, title, "c√°", "fish", "salmon", "tuna");
		}
		
		// T·ª´ ƒë·ªìng nghƒ©a cho b√≤ - optimized
		if (isBeefRelated(searchIngredient)) {
			return containsAny(description, title, "b√≤", "beef", "wagyu", "steak");
		}
		
		// T·ª´ ƒë·ªìng nghƒ©a cho g√† - optimized
		if (isChickenRelated(searchIngredient)) {
			return containsAny(description, title, "g√†", "chicken", "poultry", "hen");
		}
		
		// T·ª´ ƒë·ªìng nghƒ©a cho h·∫£i s·∫£n - optimized
		if (isSeafoodRelated(searchIngredient)) {
			return containsAny(description, title, "h·∫£i s·∫£n", "seafood", "t√¥m", "c√°", "cua", "m·ª±c");
		}
		
		return false;
	}
	
	// Helper method to check if description or title contains any of the given keywords
	private boolean containsAny(String description, String title, String... keywords) {
		for (String keyword : keywords) {
			if (description.contains(keyword) || title.contains(keyword)) {
				return true;
			}
		}
		return false;
	}

	private boolean isShrimpRelated(String ingredient) {
		return ingredient.equals("t√¥m") || ingredient.equals("shrimp") || 
			   ingredient.equals("prawns") || ingredient.equals("prawn") ||
			   ingredient.equals("lobster") || ingredient.equals("crayfish");
	}

	private boolean isFishRelated(String ingredient) {
		return ingredient.equals("c√°") || ingredient.equals("fish") || 
			   ingredient.equals("salmon") || ingredient.equals("tuna") ||
			   ingredient.equals("cod") || ingredient.equals("sea bass");
	}

	private boolean isBeefRelated(String ingredient) {
		return ingredient.equals("b√≤") || ingredient.equals("beef") || 
			   ingredient.equals("wagyu") || ingredient.equals("steak") ||
			   ingredient.equals("prime rib");
	}

	private boolean isChickenRelated(String ingredient) {
		return ingredient.equals("g√†") || ingredient.equals("chicken") || 
			   ingredient.equals("poultry") || ingredient.equals("hen");
	}

	private boolean isSeafoodRelated(String ingredient) {
		return ingredient.equals("h·∫£i s·∫£n") || ingredient.equals("seafood");
	}

	@Tool(name = "getMenuMealsByPrice", description = """
			***CRITICAL***: CH·ªà g·ªçi tool n√†y khi user H·ªéI C·ª§ TH·ªÇ v·ªÅ gi√° m√≥n ƒÉn. KH√îNG g·ªçi cho greetings, chitchat, ho·∫∑c c√¢u h·ªèi chung.

			# PURPOSE
			L·∫•y danh s√°ch menu meals theo kho·∫£ng gi√° c·ª• th·ªÉ ƒë·ªÉ t∆∞ v·∫•n m√≥n ƒÉn ph√π h·ª£p v·ªõi ng√¢n s√°ch.

			# WHEN TO CALL - CH·ªà g·ªçi khi user h·ªèi C·ª§ TH·ªÇ v·ªÅ gi√°:
			‚úÖ Vietnamese: "C√≥ m√≥n n√†o d∆∞·ªõi 100k kh√¥ng?", "M√≥n n√†o t·ª´ 50k ƒë·∫øn 150k?", "M√≥n r·∫ª nh·∫•t l√† g√¨?", "M√≥n ƒë·∫Øt nh·∫•t l√† g√¨?", "C√≥ m√≥n n√†o gi√° trung b√¨nh kh√¥ng?", "M√≥n n√†o d∆∞·ªõi 1 tri·ªáu?"
			‚úÖ English: "Do you have meals under 100k?", "What meals are between 50k and 150k?", "What's the cheapest meal?", "What's the most expensive meal?", "Any meals with average price?", "Any meals under 1 million?"

			# WHEN NOT TO CALL - TUY·ªÜT ƒê·ªêI KH√îNG g·ªçi khi:
			‚ùå Vietnamese: "Hello", "Hi", "Ch√†o", "B·∫°n kh·ªèe kh√¥ng?", "C·∫£m ∆°n", "OK", "Test", "B·∫°n c√≥ th·ªÉ gi√∫p kh√¥ng?"
			‚ùå English: "Hello", "Hi", "How are you?", "Thanks", "Thank you", "OK", "Test", "Can you help?", "What can you do?"

			# PARAMETERS
			- minPrice (integer, optional): Gi√° t·ªëi thi·ªÉu (VND). M·∫∑c ƒë·ªãnh null (kh√¥ng gi·ªõi h·∫°n t·ªëi thi·ªÉu).
			- maxPrice (integer, optional): Gi√° t·ªëi ƒëa (VND). M·∫∑c ƒë·ªãnh null (kh√¥ng gi·ªõi h·∫°n t·ªëi ƒëa).
			- sortBy (string, optional): S·∫Øp x·∫øp theo "price_asc" (r·∫ª nh·∫•t tr∆∞·ªõc) ho·∫∑c "price_desc" (ƒë·∫Øt nh·∫•t tr∆∞·ªõc). M·∫∑c ƒë·ªãnh null (kh√¥ng s·∫Øp x·∫øp).
			- limit (integer, optional): S·ªë m√≥n t·ªëi ƒëa c·∫ßn tr·∫£. M·∫∑c ƒë·ªãnh 4. Lu√¥n gi·ªõi h·∫°n t·ªëi ƒëa 4.

			# EXAMPLES:
			User: "C√≥ m√≥n n√†o d∆∞·ªõi 100k kh√¥ng?" ‚Üí minPrice=null, maxPrice=100000
			User: "M√≥n n√†o t·ª´ 50k ƒë·∫øn 150k?" ‚Üí minPrice=50000, maxPrice=150000
			User: "M√≥n r·∫ª nh·∫•t l√† g√¨?" ‚Üí sortBy="price_asc", limit=1
			User: "M√≥n ƒë·∫Øt nh·∫•t l√† g√¨?" ‚Üí sortBy="price_desc", limit=1
			User: "5 m√≥n r·∫ª nh·∫•t" ‚Üí sortBy="price_asc", limit=5

			# ERROR HANDLING
			- N·∫øu kh√¥ng c√≥ m√≥n ph√π h·ª£p: tr·∫£ {"content": "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p v·ªõi kho·∫£ng gi√° n√†y.", "menu": []}
			- N·∫øu x·∫£y ra l·ªói h·ªá th·ªëng: n√©m exception ƒë·ªÉ l·ªõp ngo√†i xin l·ªói ng∆∞·ªùi d√πng.
			""")
	public MenuMealsAiResponse getMenuMealsByPrice(Integer minPrice, Integer maxPrice, String sortBy, Integer limit) {
		long startTime = System.currentTimeMillis();
		log.info("üöÄ Starting getMenuMealsByPrice with minPrice: {}, maxPrice: {}, sortBy: {}, limit: {}", minPrice, maxPrice, sortBy, limit);
		
		try {
			// 1. Database query
			long dbStartTime = System.currentTimeMillis();
			List<MenuMealResponse> allMeals = menuMealService.getAllMenuMeals();
			long dbDuration = System.currentTimeMillis() - dbStartTime;
			log.info("üóÑÔ∏è Database query completed in {}ms", dbDuration);
			
			// 2. Filtering and processing
			long filterStartTime = System.currentTimeMillis();
			List<MenuMealResponse> filteredMeals = allMeals.stream()
				.filter(meal -> {
					if (meal.getPrice() == null) return false;
					
					boolean matchesMin = (minPrice == null) || (meal.getPrice() >= minPrice);
					boolean matchesMax = (maxPrice == null) || (meal.getPrice() <= maxPrice);
					
					return matchesMin && matchesMax;
				})
				.collect(Collectors.toList());

			if (filteredMeals.isEmpty()) {
				long filterDuration = System.currentTimeMillis() - filterStartTime;
				long totalDuration = System.currentTimeMillis() - startTime;
				log.info("‚úÖ getMenuMealsByPrice completed in {}ms (DB: {}ms, Filter: {}ms) - No meals found for price range", 
						totalDuration, dbDuration, filterDuration);
				return new MenuMealsAiResponse("Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p v·ªõi kho·∫£ng gi√° n√†y.", Collections.emptyList());
			}

			// 3. Sorting
			if (sortBy != null) {
				switch (sortBy.toLowerCase()) {
					case "price_asc":
						filteredMeals.sort((a, b) -> Double.compare(a.getPrice(), b.getPrice()));
						break;
					case "price_desc":
						filteredMeals.sort((a, b) -> Double.compare(b.getPrice(), a.getPrice()));
						break;
				}
			}

			// 4. Limiting
			int requested = (limit != null ? limit : 4);
			int maxItems = Math.min(Math.min(requested, 4), filteredMeals.size());
			List<MenuMealLiteResponse> limited = filteredMeals.stream().limit(maxItems)
				.map(m -> new MenuMealLiteResponse(
					m.getId(),
					m.getTitle(),
					m.getSlug(),
					m.getImage(),
					m.getDescription(), // DESCRIPTION CH·ª®A NGUY√äN LI·ªÜU
					m.getCarbs(),
					m.getCalories(),
					m.getProtein(),
					m.getFat(),
					m.getPrice(),
					null // menuIngredients ƒë√£ b·ªã h·ªßy b·ªè
				))
				.toList();

			// 5. Generate content based on search criteria
			String content = generatePriceContent(minPrice, maxPrice, sortBy, limited);
			long filterDuration = System.currentTimeMillis() - filterStartTime;
			
			long totalDuration = System.currentTimeMillis() - startTime;
			int contentChars = content != null ? content.length() : 0;
			int menuSize = limited.size();
			log.info("‚úÖ getMenuMealsByPrice completed in {}ms (DB: {}ms, Filter: {}ms) - Returned {} meals, contentChars={}", 
					totalDuration, dbDuration, filterDuration, menuSize, contentChars);

			return new MenuMealsAiResponse(content, limited);
		} catch (Exception ex) {
			long totalDuration = System.currentTimeMillis() - startTime;
			log.error("‚ùå getMenuMealsByPrice failed after {}ms: {}", totalDuration, ex.getMessage());
			throw ex;
		}
	}

	// Helper method to generate content based on price search criteria
	private String generatePriceContent(Integer minPrice, Integer maxPrice, String sortBy, List<MenuMealLiteResponse> meals) {
		if (meals.isEmpty()) {
			return "Hi·ªán ch∆∞a c√≥ m√≥n ph√π h·ª£p v·ªõi kho·∫£ng gi√° n√†y.";
		}

		if (sortBy != null) {
			switch (sortBy.toLowerCase()) {
				case "price_asc":
					return String.format("D∆∞·ªõi ƒë√¢y l√† %d m√≥n r·∫ª nh·∫•t trong menu:", meals.size());
				case "price_desc":
					return String.format("D∆∞·ªõi ƒë√¢y l√† %d m√≥n ƒë·∫Øt nh·∫•t trong menu:", meals.size());
			}
		}

		if (minPrice != null && maxPrice != null) {
			return String.format("D∆∞·ªõi ƒë√¢y l√† c√°c m√≥n c√≥ gi√° t·ª´ %,d VND ƒë·∫øn %,d VND:", minPrice, maxPrice);
		} else if (minPrice != null) {
			return String.format("D∆∞·ªõi ƒë√¢y l√† c√°c m√≥n c√≥ gi√° t·ª´ %,d VND tr·ªü l√™n:", minPrice);
		} else if (maxPrice != null) {
			return String.format("D∆∞·ªõi ƒë√¢y l√† c√°c m√≥n c√≥ gi√° d∆∞·ªõi %,d VND:", maxPrice);
		}

		return "D∆∞·ªõi ƒë√¢y l√† c√°c m√≥n trong menu:";
	}

	@Tool(name = "requestMeetEmp", description = "KHI user y√™u c·∫ßu g·∫∑p nh√¢n vi√™n (nh√¢n vi√™n/human/hotline), G·ªåI tool n√†y. Tham s·ªë: conversationId (Long, required). Kh√¥ng tr·∫£ l·ªùi th√™m ngo√†i vi·ªác g·ªçi tool.")
    @CacheEvict(value = "conversations", allEntries = true)
    public ChatResponse requestMeetEmp(Long conversationId) {
        if (conversationId == null) {
            throw new IllegalArgumentException("conversationId kh√¥ng ƒë∆∞·ª£c null");
        }
		long start = System.currentTimeMillis();
		log.info("requestMeetEmp start conversationId={}", conversationId);
		var conv = conversationRepo.findById(conversationId)
                .orElseThrow(() -> new EntityNotFoundException("Conversation kh√¥ng t·ªìn t·∫°i"));
		ConversationStatus prev = conv.getStatus();
		if (prev != ConversationStatus.WAITING_EMP) {
            conv.setStatus(ConversationStatus.WAITING_EMP);
            conversationRepo.save(conv);
        }
		log.info("requestMeetEmp status {} -> {} convId={}", prev, conv.getStatus(), conv.getId());
        EmpNotifyPayload payload = new EmpNotifyPayload(conv.getId(), ConversationStatus.WAITING_EMP.name(), "AI", LocalDateTime.now());
        
        // FIX: Debug WebSocket sending
        log.info("üöÄ Sending WebSocket emp-notify: conversationId={}, status={}, triggeredBy={}", 
            payload.getConversationId(), payload.getStatus(), payload.getTriggeredBy());
        
        messagingTemplate.convertAndSend("/topic/emp-notify", payload);
        log.info("‚úÖ WebSocket emp-notify sent successfully");
		long took = System.currentTimeMillis() - start;
		log.info("requestMeetEmp done in {}ms convId={}", took, conversationId);
        ChatResponse response = new ChatResponse();
        response.setId(null);
        response.setConversationId(conversationId);
        response.setSenderRole("SYSTEM");
        response.setSenderName("SYSTEM");
        response.setContent("Y√™u c·∫ßu ƒë√£ g·ª≠i, vui l√≤ng ch·ªù nh√¢n vi√™n.");
        response.setMenu(null);
        response.setTimestamp(LocalDateTime.now());
        response.setStatus(MessageStatus.SENT);
        response.setConversationStatus(ConversationStatus.WAITING_EMP.name());
        return response;
    }
}