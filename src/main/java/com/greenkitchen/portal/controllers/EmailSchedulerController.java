package com.greenkitchen.portal.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.greenkitchen.portal.services.CartScanService;

import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/apis/v1/email-scheduler")
@Slf4j
public class EmailSchedulerController {

    @Autowired
    private CartScanService cartScanService;

    /**
     * Trigger g·ª≠i email cart abandonment ngay l·∫≠p t·ª©c
     */
    @PostMapping("/trigger-now")
    public ResponseEntity<String> triggerEmailNow() {
        log.info("üîÑ API trigger g·ª≠i email cart abandonment ngay l·∫≠p t·ª©c ƒë∆∞·ª£c g·ªçi");
        
        try {
            var response = cartScanService.scanAndSendEmails();
            String message = String.format("‚úÖ ƒê√£ g·ª≠i email th√†nh c√¥ng cho %d customers", response.getNewCustomersFound());
            log.info(message);
            return ResponseEntity.ok(message);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi trigger g·ª≠i email: {}", e.getMessage());
            return ResponseEntity.internalServerError().body("L·ªói: " + e.getMessage());
        }
    }

    /**
     * L·∫•y th√¥ng tin scheduler
     */
    @GetMapping("/info")
    public ResponseEntity<String> getSchedulerInfo() {
        log.info("üìã API l·∫•y th√¥ng tin scheduler ƒë∆∞·ª£c g·ªçi");
        
        String info = """
            üïò **Email Scheduler Configuration**
            
            **Morning Schedule:** 9:00 AM h√†ng ng√†y
            **Evening Schedule:** 6:00 PM h√†ng ng√†y  
            **Frequent Schedule:** M·ªói 2 gi·ªù
            **Periodic Schedule:** M·ªói 6 gi·ªù
            
            **Status:** ‚úÖ ƒêang ho·∫°t ƒë·ªông
            **Thread Pool:** 5 threads
            **Next Run:** Theo l·ªãch tr√¨nh t·ª± ƒë·ªông
            """;
        
        return ResponseEntity.ok(info);
    }

    /**
     * Test scheduler v·ªõi th·ªùi gian t√πy ch·ªânh
     */
    @PostMapping("/test-schedule")
    public ResponseEntity<String> testSchedule(
            @RequestParam(value = "hours", defaultValue = "2") int hours) {
        log.info("üß™ API test scheduler v·ªõi t·∫ßn su·∫•t {} gi·ªù ƒë∆∞·ª£c g·ªçi", hours);
        
        try {
            var response = cartScanService.scanAndSendEmails();
            String message = String.format("‚úÖ Test scheduler th√†nh c√¥ng: %d customers ƒë∆∞·ª£c g·ª≠i email (t·∫ßn su·∫•t %d gi·ªù)", 
                response.getNewCustomersFound(), hours);
            log.info(message);
            return ResponseEntity.ok(message);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi test scheduler: {}", e.getMessage());
            return ResponseEntity.internalServerError().body("L·ªói: " + e.getMessage());
        }
    }
}
